{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\login-page\\\\Login.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../login-page/login.css\";\n// import APIStored from \"../API/APIStored\";\n// import axios from \"axios\"; // Import axios for API requests\n// // import bcrypt from \"bcryptjs\";\n// import image from \"../../image/login-backgroundImage.jpg\";\n\n// function Login() {\n//   const navigate = useNavigate();\n\n//   const [login, setLogin] = useState({\n//     userName: \"\",\n//     password: \"\",\n//   });\n\n//   const [error, setError] = useState({\n//     userName: false,\n//     password: false,\n//   });\n//   const [data, setData] = useState([]);\n//   // const [localValue, setLocalValue] = useState(\"\");\n//   useEffect(() => {\n//     // Fetch user data from the API on component mount\n//     APIStored()\n//       .then((response) => {\n//         console.log(response.data); // Log response data for debugging\n//         setData(response.data); // Set user data to state\n//       })\n//       .catch((error) => console.error(\"Error fetching data\", error));\n//   }, []);\n\n//   // Handle Login Submission\n//   async function onLogin(event) {\n//     event.preventDefault();\n\n//     // Check for empty fields\n//     const newError = {\n//       userName: !login.userName,\n//       password: !login.password,\n//     };\n\n//     setError(newError);\n\n//     if (Object.values(newError).some((fieldError) => fieldError)) {\n//       console.log(\"Mandatory details are not filled\");\n//       return;\n//     }\n\n//     try {\n//       // Send authentication request to your backend\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/authenticate\",\n//         {\n//           username: login.userName,\n//           password: login.password, // Send the plain password here for JWT generation\n//         }\n//       );\n\n//       // Log the full response object to see what is being returned\n//       console.log(\"Full Response:\", response);\n\n//       if (response.status === 200) {\n//         // Store the JWT token in localStorage\n//         const token = response.data.jwt;\n//         console.log(\"Received Token:\", token); // Log the token for debugging\n\n//         // Decode token to get user ID or other details if needed\n//         // const userId = parseJwt(token).id; // Assuming `id` is in the token payload\n//         const tokenData = parseJwt(token);\n//         sessionStorage.setItem(\"userId\", tokenData.id);\n//         localStorage.setItem(\"authToken\", tokenData.id);\n//         console.log(\"authToken\", tokenData.id);\n//         if (sessionStorage.getItem(\"userId\") === \"[]\") {\n//           console.log(\"Local storage is empty\");\n//         }\n//         console.log(\"Token Data:\", tokenData); // Log the token data for debugging\n//         // const userId = tokenData.id; // Assuming `id` is in the token payload\n//         const userId = sessionStorage.getItem(\"userId\");\n//         console.log(\"authToken\", userId); // Log the user ID for debugging\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n//         // const APIUserId = localStorage.get(\"authToken\");\n//         // console.log(\"THIS IS YOU AUTH USER LOCASTORED ID\" + APIUserId);\n\n//         // Fetch account data and user details\n//         const accountResponse = await axios.get(\n//           `http://localhost:8080/api/account/userid/${userId}`\n//         );\n//         const userResponse = await axios.get(\n//           `http://localhost:8080/api/users/${userId}`\n//         );\n\n//         // Navigate to the dashboard with account data and user details\n//         navigate(`/dashboard/${userId}`, {\n//           state: {\n//             JWTaccount: accountResponse.data,\n//             SetJWTuser: userResponse.data,\n//           },\n//         });\n//       } else {\n//         setError({\n//           userName: true,\n//           password: true,\n//         });\n//         console.log(\"Invalid username or password\");\n//       }\n//     } catch (error) {\n//       setError({\n//         userName: true,\n//         password: true,\n//       });\n//       console.error(\"Authentication failed\", error);\n//     }\n//   }\n\n//   function parseJwt(token) {\n//     if (!token) {\n//       console.error(\"Token is undefined or null\");\n//       return {};\n//     }\n//     try {\n//       const base64Url = token.split(\".\")[1];\n//       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n//       const payload = JSON.parse(window.atob(base64));\n//       return {\n//         id: payload.userId,\n//         email: payload.sub,\n//       };\n//     } catch (error) {\n//       console.error(\"Error parsing JWT token:\", error);\n//       return {};\n//     }\n//   }\n\n//   function onLoginChange(event) {\n//     const { name, value } = event.target;\n//     setLogin((prevLoginData) => ({\n//       ...prevLoginData,\n//       [name]: value,\n//     }));\n\n//     setError((prevError) => ({\n//       ...prevError,\n//       [name]: !value, // Set error state based on input value\n//     }));\n//   }\n\n//   return (\n//     <div className=\"Login-page\">\n//       <img src={image} className=\"login-image\" alt=\"login-background\" />\n//       <form className=\"Login-form\" onSubmit={onLogin}>\n//         <div className=\"bank-name\">Easy Online Banking</div>\n//         <h1 className=\"Login-text\">Login</h1>\n//         <div className=\"input-group\">\n//           <input\n//             className={`userName ${error.userName ? \"input\" : \"\"}`}\n//             type=\"text\"\n//             name=\"userName\"\n//             autoComplete=\"off\"\n//             placeholder=\"Email ID\"\n//             onChange={onLoginChange}\n//             value={login.userName}\n//             style={{ borderColor: error.userName ? \"red\" : \"\" }}\n//           />\n//           {error.userName && (\n//             <span style={{ color: \"red\" }} className=\"error-text\">\n//               Please Enter User Id\n//             </span>\n//           )}\n//         </div>\n//         <div className=\"input-group\">\n//           <input\n//             className={`password ${error.password ? \"input\" : \"\"}`}\n//             type=\"password\"\n//             name=\"password\"\n//             autoComplete=\"off\"\n//             placeholder=\"Password\"\n//             onChange={onLoginChange}\n//             value={login.password}\n//             style={{ borderColor: error.password ? \"red\" : \"\" }}\n//           />\n//           <span className=\"show-password\" id=\"show-password-btn\"></span>\n//           {error.password && (\n//             <span style={{ color: \"red\" }} className=\"error-text\">\n//               Please Enter Password\n//             </span>\n//           )}\n//         </div>\n//         <button className=\"Login-btn\" type=\"submit\">\n//           Login\n//         </button>\n//         <a href=\"/forgot-password\" className=\"Forgot-password-link\">\n//           Forgot Password?\n//         </a>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Login;\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../login-page/login.css\";\nimport APIStored from \"../API/APIStored\";\nimport axios from \"axios\"; // Import axios for API requests\nimport image from \"../../image/login-backgroundImage.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const navigate = useNavigate();\n  const [login, setLogin] = useState({\n    userName: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState({\n    userName: false,\n    password: false\n  });\n\n  // Handle Login Submission\n  async function onLogin(event) {\n    event.preventDefault();\n\n    // Check for empty fields\n    const newError = {\n      userName: !login.userName,\n      password: !login.password\n    };\n    setError(newError);\n    if (Object.values(newError).some(fieldError => fieldError)) {\n      console.log(\"Mandatory details are not filled\");\n      return;\n    }\n    try {\n      // Send authentication request to your backend\n      const response = await axios.post(\"http://localhost:8080/api/authenticate\", {\n        username: login.userName,\n        password: login.password\n      });\n      console.log(\"Full Response:\", response);\n      if (response.status === 200) {\n        // Store the JWT token in localStorage\n        const token = response.data.jwt;\n        console.log(\"Received Token:\", token);\n\n        // Decode the token to extract user ID\n        const tokenData = parseJwt(token);\n        const userId = tokenData.id;\n        if (userId) {\n          // Store userId in sessionStorage and localStorage\n          sessionStorage.setItem(\"userId\", userId);\n          localStorage.setItem(\"authToken\", token); // Store the token in localStorage\n\n          console.log(\"Stored User ID:\", userId);\n\n          // Set Authorization header for future requests\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n          // Fetch account data and user details\n          const accountResponse = await axios.get(`http://localhost:8080/api/account/userid/${userId}`);\n          const userResponse = await axios.get(`http://localhost:8080/api/users/${userId}`);\n\n          // Navigate to the dashboard with account data and user details\n          navigate(`/dashboard/${userId}`, {\n            state: {\n              JWTaccount: accountResponse.data,\n              SetJWTuser: userResponse.data\n            }\n          });\n        } else {\n          console.error(\"Failed to extract userId from token.\");\n        }\n      } else {\n        setError({\n          userName: true,\n          password: true\n        });\n        console.log(\"Invalid username or password\");\n      }\n    } catch (error) {\n      setError({\n        userName: true,\n        password: true\n      });\n      console.error(\"Authentication failed\", error);\n    }\n  }\n  function parseJwt(token) {\n    if (!token) {\n      console.error(\"Token is undefined or null\");\n      return {};\n    }\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const payload = JSON.parse(window.atob(base64));\n      return {\n        id: payload.userId,\n        email: payload.sub\n      };\n    } catch (error) {\n      console.error(\"Error parsing JWT token:\", error);\n      return {};\n    }\n  }\n  function onLoginChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setLogin(prevLoginData => ({\n      ...prevLoginData,\n      [name]: value\n    }));\n    setError(prevError => ({\n      ...prevError,\n      [name]: !value // Set error state based on input value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      className: \"login-image\",\n      alt: \"login-background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Login-form\",\n      onSubmit: onLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bank-name\",\n        children: \"Easy Online Banking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Login-text\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: `userName ${error.userName ? \"input\" : \"\"}`,\n          type: \"text\",\n          name: \"userName\",\n          autoComplete: \"off\",\n          placeholder: \"Email ID\",\n          onChange: onLoginChange,\n          value: login.userName,\n          style: {\n            borderColor: error.userName ? \"red\" : \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), error.userName && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          className: \"error-text\",\n          children: \"Please Enter User Id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: `password ${error.password ? \"input\" : \"\"}`,\n          type: \"password\",\n          name: \"password\",\n          autoComplete: \"off\",\n          placeholder: \"Password\",\n          onChange: onLoginChange,\n          value: login.password,\n          style: {\n            borderColor: error.password ? \"red\" : \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), error.password && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          className: \"error-text\",\n          children: \"Please Enter Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Login-btn\",\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/forgot-password\",\n        className: \"Forgot-password-link\",\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"jF9CVPa7XW0lDDSKHSLMpvpAEhM=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","APIStored","axios","image","jsxDEV","_jsxDEV","Login","_s","navigate","login","setLogin","userName","password","error","setError","onLogin","event","preventDefault","newError","Object","values","some","fieldError","console","log","response","post","username","status","token","data","jwt","tokenData","parseJwt","userId","id","sessionStorage","setItem","localStorage","defaults","headers","common","accountResponse","get","userResponse","state","JWTaccount","SetJWTuser","base64Url","split","base64","replace","payload","JSON","parse","window","atob","email","sub","onLoginChange","name","value","target","prevLoginData","prevError","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","autoComplete","placeholder","onChange","style","borderColor","color","href","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/login-page/Login.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../login-page/login.css\";\r\n// import APIStored from \"../API/APIStored\";\r\n// import axios from \"axios\"; // Import axios for API requests\r\n// // import bcrypt from \"bcryptjs\";\r\n// import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\n// function Login() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const [login, setLogin] = useState({\r\n//     userName: \"\",\r\n//     password: \"\",\r\n//   });\r\n\r\n//   const [error, setError] = useState({\r\n//     userName: false,\r\n//     password: false,\r\n//   });\r\n//   const [data, setData] = useState([]);\r\n//   // const [localValue, setLocalValue] = useState(\"\");\r\n//   useEffect(() => {\r\n//     // Fetch user data from the API on component mount\r\n//     APIStored()\r\n//       .then((response) => {\r\n//         console.log(response.data); // Log response data for debugging\r\n//         setData(response.data); // Set user data to state\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data\", error));\r\n//   }, []);\r\n\r\n//   // Handle Login Submission\r\n//   async function onLogin(event) {\r\n//     event.preventDefault();\r\n\r\n//     // Check for empty fields\r\n//     const newError = {\r\n//       userName: !login.userName,\r\n//       password: !login.password,\r\n//     };\r\n\r\n//     setError(newError);\r\n\r\n//     if (Object.values(newError).some((fieldError) => fieldError)) {\r\n//       console.log(\"Mandatory details are not filled\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // Send authentication request to your backend\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8080/api/authenticate\",\r\n//         {\r\n//           username: login.userName,\r\n//           password: login.password, // Send the plain password here for JWT generation\r\n//         }\r\n//       );\r\n\r\n//       // Log the full response object to see what is being returned\r\n//       console.log(\"Full Response:\", response);\r\n\r\n//       if (response.status === 200) {\r\n//         // Store the JWT token in localStorage\r\n//         const token = response.data.jwt;\r\n//         console.log(\"Received Token:\", token); // Log the token for debugging\r\n\r\n//         // Decode token to get user ID or other details if needed\r\n//         // const userId = parseJwt(token).id; // Assuming `id` is in the token payload\r\n//         const tokenData = parseJwt(token);\r\n//         sessionStorage.setItem(\"userId\", tokenData.id);\r\n//         localStorage.setItem(\"authToken\", tokenData.id);\r\n//         console.log(\"authToken\", tokenData.id);\r\n//         if (sessionStorage.getItem(\"userId\") === \"[]\") {\r\n//           console.log(\"Local storage is empty\");\r\n//         }\r\n//         console.log(\"Token Data:\", tokenData); // Log the token data for debugging\r\n//         // const userId = tokenData.id; // Assuming `id` is in the token payload\r\n//         const userId = sessionStorage.getItem(\"userId\");\r\n//         console.log(\"authToken\", userId); // Log the user ID for debugging\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//         // const APIUserId = localStorage.get(\"authToken\");\r\n//         // console.log(\"THIS IS YOU AUTH USER LOCASTORED ID\" + APIUserId);\r\n\r\n//         // Fetch account data and user details\r\n//         const accountResponse = await axios.get(\r\n//           `http://localhost:8080/api/account/userid/${userId}`\r\n//         );\r\n//         const userResponse = await axios.get(\r\n//           `http://localhost:8080/api/users/${userId}`\r\n//         );\r\n\r\n//         // Navigate to the dashboard with account data and user details\r\n//         navigate(`/dashboard/${userId}`, {\r\n//           state: {\r\n//             JWTaccount: accountResponse.data,\r\n//             SetJWTuser: userResponse.data,\r\n//           },\r\n//         });\r\n//       } else {\r\n//         setError({\r\n//           userName: true,\r\n//           password: true,\r\n//         });\r\n//         console.log(\"Invalid username or password\");\r\n//       }\r\n//     } catch (error) {\r\n//       setError({\r\n//         userName: true,\r\n//         password: true,\r\n//       });\r\n//       console.error(\"Authentication failed\", error);\r\n//     }\r\n//   }\r\n\r\n//   function parseJwt(token) {\r\n//     if (!token) {\r\n//       console.error(\"Token is undefined or null\");\r\n//       return {};\r\n//     }\r\n//     try {\r\n//       const base64Url = token.split(\".\")[1];\r\n//       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n//       const payload = JSON.parse(window.atob(base64));\r\n//       return {\r\n//         id: payload.userId,\r\n//         email: payload.sub,\r\n//       };\r\n//     } catch (error) {\r\n//       console.error(\"Error parsing JWT token:\", error);\r\n//       return {};\r\n//     }\r\n//   }\r\n\r\n//   function onLoginChange(event) {\r\n//     const { name, value } = event.target;\r\n//     setLogin((prevLoginData) => ({\r\n//       ...prevLoginData,\r\n//       [name]: value,\r\n//     }));\r\n\r\n//     setError((prevError) => ({\r\n//       ...prevError,\r\n//       [name]: !value, // Set error state based on input value\r\n//     }));\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"Login-page\">\r\n//       <img src={image} className=\"login-image\" alt=\"login-background\" />\r\n//       <form className=\"Login-form\" onSubmit={onLogin}>\r\n//         <div className=\"bank-name\">Easy Online Banking</div>\r\n//         <h1 className=\"Login-text\">Login</h1>\r\n//         <div className=\"input-group\">\r\n//           <input\r\n//             className={`userName ${error.userName ? \"input\" : \"\"}`}\r\n//             type=\"text\"\r\n//             name=\"userName\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Email ID\"\r\n//             onChange={onLoginChange}\r\n//             value={login.userName}\r\n//             style={{ borderColor: error.userName ? \"red\" : \"\" }}\r\n//           />\r\n//           {error.userName && (\r\n//             <span style={{ color: \"red\" }} className=\"error-text\">\r\n//               Please Enter User Id\r\n//             </span>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"input-group\">\r\n//           <input\r\n//             className={`password ${error.password ? \"input\" : \"\"}`}\r\n//             type=\"password\"\r\n//             name=\"password\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Password\"\r\n//             onChange={onLoginChange}\r\n//             value={login.password}\r\n//             style={{ borderColor: error.password ? \"red\" : \"\" }}\r\n//           />\r\n//           <span className=\"show-password\" id=\"show-password-btn\"></span>\r\n//           {error.password && (\r\n//             <span style={{ color: \"red\" }} className=\"error-text\">\r\n//               Please Enter Password\r\n//             </span>\r\n//           )}\r\n//         </div>\r\n//         <button className=\"Login-btn\" type=\"submit\">\r\n//           Login\r\n//         </button>\r\n//         <a href=\"/forgot-password\" className=\"Forgot-password-link\">\r\n//           Forgot Password?\r\n//         </a>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Login;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../login-page/login.css\";\r\nimport APIStored from \"../API/APIStored\";\r\nimport axios from \"axios\"; // Import axios for API requests\r\nimport image from \"../../image/login-backgroundImage.jpg\";\r\n\r\nfunction Login() {\r\n  const navigate = useNavigate();\r\n\r\n  const [login, setLogin] = useState({\r\n    userName: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState({\r\n    userName: false,\r\n    password: false,\r\n  });\r\n\r\n  // Handle Login Submission\r\n  async function onLogin(event) {\r\n    event.preventDefault();\r\n\r\n    // Check for empty fields\r\n    const newError = {\r\n      userName: !login.userName,\r\n      password: !login.password,\r\n    };\r\n\r\n    setError(newError);\r\n\r\n    if (Object.values(newError).some((fieldError) => fieldError)) {\r\n      console.log(\"Mandatory details are not filled\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send authentication request to your backend\r\n      const response = await axios.post(\r\n        \"http://localhost:8080/api/authenticate\",\r\n        {\r\n          username: login.userName,\r\n          password: login.password,\r\n        }\r\n      );\r\n\r\n      console.log(\"Full Response:\", response);\r\n\r\n      if (response.status === 200) {\r\n        // Store the JWT token in localStorage\r\n        const token = response.data.jwt;\r\n        console.log(\"Received Token:\", token);\r\n\r\n        // Decode the token to extract user ID\r\n        const tokenData = parseJwt(token);\r\n        const userId = tokenData.id;\r\n\r\n        if (userId) {\r\n          // Store userId in sessionStorage and localStorage\r\n          sessionStorage.setItem(\"userId\", userId);\r\n          localStorage.setItem(\"authToken\", token); // Store the token in localStorage\r\n\r\n          console.log(\"Stored User ID:\", userId);\r\n\r\n          // Set Authorization header for future requests\r\n          axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n\r\n          // Fetch account data and user details\r\n          const accountResponse = await axios.get(\r\n            `http://localhost:8080/api/account/userid/${userId}`\r\n          );\r\n          const userResponse = await axios.get(\r\n            `http://localhost:8080/api/users/${userId}`\r\n          );\r\n\r\n          // Navigate to the dashboard with account data and user details\r\n          navigate(`/dashboard/${userId}`, {\r\n            state: {\r\n              JWTaccount: accountResponse.data,\r\n              SetJWTuser: userResponse.data,\r\n            },\r\n          });\r\n        } else {\r\n          console.error(\"Failed to extract userId from token.\");\r\n        }\r\n      } else {\r\n        setError({\r\n          userName: true,\r\n          password: true,\r\n        });\r\n        console.log(\"Invalid username or password\");\r\n      }\r\n    } catch (error) {\r\n      setError({\r\n        userName: true,\r\n        password: true,\r\n      });\r\n      console.error(\"Authentication failed\", error);\r\n    }\r\n  }\r\n\r\n  function parseJwt(token) {\r\n    if (!token) {\r\n      console.error(\"Token is undefined or null\");\r\n      return {};\r\n    }\r\n    try {\r\n      const base64Url = token.split(\".\")[1];\r\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n      const payload = JSON.parse(window.atob(base64));\r\n      return {\r\n        id: payload.userId,\r\n        email: payload.sub,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error parsing JWT token:\", error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  function onLoginChange(event) {\r\n    const { name, value } = event.target;\r\n    setLogin((prevLoginData) => ({\r\n      ...prevLoginData,\r\n      [name]: value,\r\n    }));\r\n\r\n    setError((prevError) => ({\r\n      ...prevError,\r\n      [name]: !value, // Set error state based on input value\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login-page\">\r\n      <img src={image} className=\"login-image\" alt=\"login-background\" />\r\n      <form className=\"Login-form\" onSubmit={onLogin}>\r\n        <div className=\"bank-name\">Easy Online Banking</div>\r\n        <h1 className=\"Login-text\">Login</h1>\r\n        <div className=\"input-group\">\r\n          <input\r\n            className={`userName ${error.userName ? \"input\" : \"\"}`}\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Email ID\"\r\n            onChange={onLoginChange}\r\n            value={login.userName}\r\n            style={{ borderColor: error.userName ? \"red\" : \"\" }}\r\n          />\r\n          {error.userName && (\r\n            <span style={{ color: \"red\" }} className=\"error-text\">\r\n              Please Enter User Id\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"input-group\">\r\n          <input\r\n            className={`password ${error.password ? \"input\" : \"\"}`}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Password\"\r\n            onChange={onLoginChange}\r\n            value={login.password}\r\n            style={{ borderColor: error.password ? \"red\" : \"\" }}\r\n          />\r\n          {error.password && (\r\n            <span style={{ color: \"red\" }} className=\"error-text\">\r\n              Please Enter Password\r\n            </span>\r\n          )}\r\n        </div>\r\n        <button className=\"Login-btn\" type=\"submit\">\r\n          Login\r\n        </button>\r\n        <a href=\"/forgot-password\" className=\"Forgot-password-link\">\r\n          Forgot Password?\r\n        </a>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,yBAAyB;AAChC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAOC,KAAK,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAMC,QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
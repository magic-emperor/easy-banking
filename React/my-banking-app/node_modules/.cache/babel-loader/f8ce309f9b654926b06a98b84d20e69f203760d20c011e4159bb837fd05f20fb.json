{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\Dashboard\\\\FundTransfer.js\",\n  _s = $RefreshSig$();\n// // import ReactDOM from \"react-dom\";\n// // import \"./deposit.css\";\n// // import React, { useContext, useState } from \"react\";\n// // import { useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import { AccountContext } from \"../Context/AccountProvider\";\n\n// // function FundTransfer({ setFundTransfer }) {\n// //   const portalRoot = document.getElementById(\"portalRoot\");\n// //   const { account, setAccount } = useContext(AccountContext);\n// //   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\"); // For receiver's account number\n\n// //   const [inputAmount, setInputAmount] = useState(\"\"); // Initialize with current balance or empty\n\n// //   useEffect(() => {\n// //     const userId = localStorage.getItem(\"userId\");\n// //     if (userId) {\n// //       axios\n// //         .get(`http://localhost:8080/api/account/userid/${userId}`)\n// //         .then((response) => {\n// //           setAccount(response.data);\n// //         })\n// //         .catch((error) => {\n// //           console.error(\"Error fetching account data:\", error);\n// //         });\n// //     }\n// //   }, [setAccount]);\n\n// //   if (!portalRoot) {\n// //     console.error(\"Portal root not found\");\n// //     return null;\n// //   }\n\n// //   // Handle input change\n// //   function handleInputChange(e) {\n// //     setInputAmount(e.target.value);\n// //   }\n\n// //   // Add a new handler for receiver's account number\n// //   function handleReceiverAccChange(e) {\n// //     setReceiverAccNumber(e.target.value);\n// //   }\n\n// //   function handleDeposit(e) {\n// //     e.preventDefault();\n\n// //     if (account.accBalance < inputAmount || account.accBalance === 0) {\n// //       alert(\"Insufficient balance\");\n// //       return;\n// //     } else if (inputAmount < 0) {\n// //       alert(\"Please insert a valid amount\");\n// //       return;\n// //     }\n\n// //     // Prepare updated sender's account JSON body explicitly\n// //     const senderAccountBody = {\n// //       accNumber: account.accNumber,\n// //       accBalance: account.accBalance - Number(inputAmount),\n// //       accCreatedAt: account.accCreatedAt,\n// //       accType: account.accType,\n// //       userId: account.userId,\n// //     };\n\n// //     // Send PUT request for sender's account\n// //     axios\n// //       .put(\n// //         `http://localhost:8080/api/account/acc/${account.accNumber}`,\n// //         senderAccountBody,\n// //         { headers: { \"Content-Type\": \"application/json\" } }\n// //       )\n// //       .then((response) => {\n// //         console.log(\"Sender account updated:\", response.data);\n// //         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\n\n// //         // Now get receiver's account details and update\n// //         axios\n// //           .get(`http://localhost:8080/api/account/${receiverAccNumber}`)\n// //           .then((receiverResponse) => {\n// //             const receiverAccount = receiverResponse.data;\n\n// //             // Prepare updated receiver account body explicitly\n// //             const receiverAccountBody = {\n// //               accId: receiverAccount.accId,\n// //               userId: receiverAccount.userId,\n// //               accNumber: receiverAccNumber,\n// //               accBalance: receiverAccount.accBalance + Number(inputAmount),\n// //               accCreatedAt: receiverAccount.accCreatedAt,\n// //               accType: receiverAccount.accType,\n// //             };\n\n// //             // Send PUT request to update receiver's account balance\n// //             return axios.put(\n// //               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\n// //               receiverAccountBody,\n// //               { headers: { \"Content-Type\": \"application/json\" } }\n// //             );\n// //           })\n// //           .then((receiverUpdateResponse) => {\n// //             console.log(\n// //               \"Receiver account updated:\",\n// //               receiverUpdateResponse.data\n// //             );\n// //             setFundTransfer(false); // Close modal on success\n// //           })\n// //           .catch((error) => {\n// //             console.error(\"Error updating receiver's account:\", error);\n// //           });\n// //       })\n// //       .catch((error) => {\n// //         console.error(\"Error updating sender's account:\", error);\n// //       });\n// //   }\n\n// //   return ReactDOM.createPortal(\n// //     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\n// //       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\n// //         <div className=\"deposit-inner\">\n// //           <h1>Fund Transfer</h1>\n// //           <form onSubmit={handleDeposit}>\n// //             <label className=\"amount-details\">Amount:</label>\n// //             <input\n// //               type=\"number\"\n// //               className=\"amount number-input\"\n// //               name=\"accBalance\"\n// //               value={inputAmount}\n// //               placeholder=\"Enter Amount Here\"\n// //               autoComplete=\"off\"\n// //               required\n// //               onChange={handleInputChange}\n// //             />\n// //             <label>Account Number</label>\n// //             <input\n// //               type=\"number\"\n// //               className=\"account-no number-input\"\n// //               placeholder=\"Enter Receiver Account Number\"\n// //               autoComplete=\"off\"\n// //               name=\"accountNo\"\n// //               required\n// //               onChange={handleReceiverAccChange}\n// //             />\n// //             <nav className=\"deposit-btn-div\">\n// //               <button type=\"submit\" className=\"deposit-btn\">\n// //                 FundTransafer\n// //               </button>\n// //             </nav>\n// //           </form>\n// //           <button\n// //             className=\"close-button\"\n// //             onClick={() => setFundTransfer(false)}\n// //           >\n// //             Close\n// //           </button>\n// //         </div>\n// //       </div>\n// //     </div>,\n// //     portalRoot\n// //   );\n// // }\n\n// // export default FundTransfer;\n// import ReactDOM from \"react-dom\";\n// import \"./deposit.css\";\n// import React, { useContext, useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { AccountContext } from \"../Context/AccountProvider\";\n\n// function FundTransfer({ setFundTransfer }) {\n//   const portalRoot = document.getElementById(\"portalRoot\");\n//   const { account, setAccount } = useContext(AccountContext);\n//   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\");\n//   const [inputAmount, setInputAmount] = useState(\"\");\n\n//   useEffect(() => {\n//     const userId = localStorage.getItem(\"userId\");\n//     const token = localStorage.getItem(\"authToken\");\n//     if (userId && token) {\n//       axios\n//         .get(`http://localhost:8080/api/account/userid/${userId}`, {\n//           headers: { Authorization: `Bearer ${token}` },\n//         })\n//         .then((response) => {\n//           setAccount(response.data);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching account data:\", error);\n//         });\n//     }\n//   }, [setAccount]);\n\n//   if (!portalRoot) {\n//     console.error(\"Portal root not found\");\n//     return null;\n//   }\n\n//   function handleInputChange(e) {\n//     setInputAmount(e.target.value);\n//   }\n\n//   function handleReceiverAccChange(e) {\n//     setReceiverAccNumber(e.target.value);\n//   }\n\n//   function handleDeposit(e) {\n//     e.preventDefault();\n//     const token = localStorage.getItem(\"authToken\");\n\n//     if (account.accBalance < inputAmount || account.accBalance === 0) {\n//       alert(\"Insufficient balance\");\n//       return;\n//     } else if (inputAmount < 0) {\n//       alert(\"Please insert a valid amount\");\n//       return;\n//     }\n\n//     const senderAccountBody = {\n//       accNumber: account.accNumber,\n//       accBalance: account.accBalance - Number(inputAmount),\n//       accCreatedAt: account.accCreatedAt,\n//       accType: account.accType,\n//       userId: account.userId,\n//     };\n\n//     axios\n//       .put(\n//         `http://localhost:8080/api/account/acc/${account.accNumber}`,\n//         senderAccountBody,\n//         {\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             \"Authorization\": `Bearer ${token}`,\n//           },\n//         }\n//       )\n//       .then((response) => {\n//         console.log(\"Sender account updated:\", response.data);\n//         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\n\n//         axios\n//           .get(`http://localhost:8080/api/account/${receiverAccNumber}`, {\n//             headers: { Authorization: `Bearer ${token}` },\n//           })\n//           .then((receiverResponse) => {\n//             const receiverAccount = receiverResponse.data;\n\n//             const receiverAccountBody = {\n//               accId: receiverAccount.accId,\n//               userId: receiverAccount.userId,\n//               accNumber: receiverAccNumber,\n//               accBalance: receiverAccount.accBalance + Number(inputAmount),\n//               accCreatedAt: receiverAccount.accCreatedAt,\n//               accType: receiverAccount.accType,\n//             };\n\n//             return axios.put(\n//               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\n//               receiverAccountBody,\n//               {\n//                 headers: {\n//                   \"Content-Type\": \"application/json\",\n//                   \"Authorization\": `Bearer ${token}`,\n//                 },\n//               }\n//             );\n//           })\n//           .then((receiverUpdateResponse) => {\n//             console.log(\n//               \"Receiver account updated:\",\n//               receiverUpdateResponse.data\n//             );\n//             setFundTransfer(false);\n//           })\n//           .catch((error) => {\n//             console.error(\"Error updating receiver's account:\", error);\n//           });\n//       })\n//       .catch((error) => {\n//         console.error(\"Error updating sender's account:\", error);\n//       });\n//   }\n\n//   return ReactDOM.createPortal(\n//     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\n//         <div className=\"deposit-inner\">\n//           <h1>Fund Transfer</h1>\n//           <form onSubmit={handleDeposit}>\n//             <label className=\"amount-details\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               className=\"amount number-input\"\n//               name=\"accBalance\"\n//               value={inputAmount}\n//               placeholder=\"Enter Amount Here\"\n//               autoComplete=\"off\"\n//               required\n//               onChange={handleInputChange}\n//             />\n//             <label>Account Number</label>\n//             <input\n//               type=\"number\"\n//               className=\"account-no number-input\"\n//               placeholder=\"Enter Receiver Account Number\"\n//               autoComplete=\"off\"\n//               name=\"accountNo\"\n//               required\n//               onChange={handleReceiverAccChange}\n//             />\n//             <nav className=\"deposit-btn-div\">\n//               <button type=\"submit\" className=\"deposit-btn\">\n//                 Fund Transfer\n//               </button>\n//             </nav>\n//           </form>\n//           <button\n//             className=\"close-button\"\n//             onClick={() => setFundTransfer(false)}\n//           >\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     </div>,\n//     portalRoot\n//   );\n// }\n\n// export default FundTransfer;\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport { AccountContext } from \"../Context/AccountProvider\";\nimport \"../Dashboard/fundTransfer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FundTransfer({\n  setFundTransfer\n}) {\n  _s();\n  const portalRoot = document.getElementById(\"portalRoot\");\n  const {\n    account\n  } = useContext(AccountContext);\n  const [fundData, setFundData] = useState({\n    userId: localStorage.getItem(\"userId\"),\n    userName: \"\",\n    userAddress: \"\",\n    accountNumber: account ? account.accNumber : \"\",\n    mobileNumber: \"\",\n    amountTransfered: 0,\n    transferDetails: \"\",\n    balance: account ? account.accBalance : 0\n  });\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    const userId = localStorage.getItem(\"userId\");\n    if (userId && token) {\n      axios.get(`http://localhost:8080/api/account/userid/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setFundData(prev => ({\n          ...prev,\n          accountNumber: response.data.accNumber\n        }));\n      }).catch(error => {\n        console.error(\"Error fetching account data:\", error);\n      });\n    }\n  }, []);\n  if (!portalRoot) {\n    console.error(\"Portal root not found\");\n    return null;\n  }\n  function handleInputChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setFundData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  }\n  function handleFundSubmission(e) {\n    e.preventDefault();\n    const userId = localStorage.getItem(\"userId\");\n    const token = localStorage.getItem(\"authToken\");\n    const newFund = {\n      ...fundData,\n      userId: userId\n    };\n    console.log(\"Updated fund data before POST:\", newFund);\n    axios.post(\"http://localhost:8080/api/transaction\", newFund, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(\"Fund transfer successfully recorded:\", res.data);\n      setFundTransfer(false);\n      // You might want to show a success message to the user here\n    }).catch(error => {\n      console.error(\"Error recording fund transfer:\", error);\n      // You might want to show an error message to the user here\n    });\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fund-overlay\",\n    onClick: () => setFundTransfer(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fund-modal\",\n      onClick: e => e.stopPropagation(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fund-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Fund Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleFundSubmission,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Full Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"userName\",\n            className: \"input-field\",\n            autoComplete: \"off\",\n            value: fundData.userName,\n            placeholder: \"Enter your full name\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"userAddress\",\n            className: \"input-field\",\n            autoComplete: \"off\",\n            value: fundData.userAddress,\n            placeholder: \"Enter your address\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Mobile Number:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"mobileNumber\",\n            className: \"input-field\",\n            autoComplete: \"off\",\n            value: fundData.mobileNumber,\n            placeholder: \"Enter your mobile number\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"amountTransfered\",\n            className: \"input-field\",\n            autoComplete: \"off\",\n            value: fundData.amountTransfered,\n            placeholder: \"Enter the amount to transfer\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"input-label\",\n            children: \"Transfer Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"transferDetails\",\n            className: \"input-field\",\n            autoComplete: \"off\",\n            value: fundData.transferDetails,\n            placeholder: \"Enter transfer details\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-button\",\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this), portalRoot);\n}\n_s(FundTransfer, \"ZH9Lz3Zo87vr9g86tBJmZcHA6LU=\");\n_c = FundTransfer;\nexport default FundTransfer;\nvar _c;\n$RefreshReg$(_c, \"FundTransfer\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","axios","AccountContext","jsxDEV","_jsxDEV","FundTransfer","setFundTransfer","_s","portalRoot","document","getElementById","account","useContext","fundData","setFundData","userId","localStorage","getItem","userName","userAddress","accountNumber","accNumber","mobileNumber","amountTransfered","transferDetails","balance","accBalance","token","get","headers","Authorization","then","response","prev","data","catch","error","console","handleInputChange","e","name","value","target","handleFundSubmission","preventDefault","newFund","log","post","res","createPortal","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","autoComplete","placeholder","required","onChange","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/Dashboard/FundTransfer.js"],"sourcesContent":["// // import ReactDOM from \"react-dom\";\r\n// // import \"./deposit.css\";\r\n// // import React, { useContext, useState } from \"react\";\r\n// // import { useEffect } from \"react\";\r\n// // import axios from \"axios\";\r\n// // import { AccountContext } from \"../Context/AccountProvider\";\r\n\r\n// // function FundTransfer({ setFundTransfer }) {\r\n// //   const portalRoot = document.getElementById(\"portalRoot\");\r\n// //   const { account, setAccount } = useContext(AccountContext);\r\n// //   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\"); // For receiver's account number\r\n\r\n// //   const [inputAmount, setInputAmount] = useState(\"\"); // Initialize with current balance or empty\r\n\r\n// //   useEffect(() => {\r\n// //     const userId = localStorage.getItem(\"userId\");\r\n// //     if (userId) {\r\n// //       axios\r\n// //         .get(`http://localhost:8080/api/account/userid/${userId}`)\r\n// //         .then((response) => {\r\n// //           setAccount(response.data);\r\n// //         })\r\n// //         .catch((error) => {\r\n// //           console.error(\"Error fetching account data:\", error);\r\n// //         });\r\n// //     }\r\n// //   }, [setAccount]);\r\n\r\n// //   if (!portalRoot) {\r\n// //     console.error(\"Portal root not found\");\r\n// //     return null;\r\n// //   }\r\n\r\n// //   // Handle input change\r\n// //   function handleInputChange(e) {\r\n// //     setInputAmount(e.target.value);\r\n// //   }\r\n\r\n// //   // Add a new handler for receiver's account number\r\n// //   function handleReceiverAccChange(e) {\r\n// //     setReceiverAccNumber(e.target.value);\r\n// //   }\r\n\r\n// //   function handleDeposit(e) {\r\n// //     e.preventDefault();\r\n\r\n// //     if (account.accBalance < inputAmount || account.accBalance === 0) {\r\n// //       alert(\"Insufficient balance\");\r\n// //       return;\r\n// //     } else if (inputAmount < 0) {\r\n// //       alert(\"Please insert a valid amount\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     // Prepare updated sender's account JSON body explicitly\r\n// //     const senderAccountBody = {\r\n// //       accNumber: account.accNumber,\r\n// //       accBalance: account.accBalance - Number(inputAmount),\r\n// //       accCreatedAt: account.accCreatedAt,\r\n// //       accType: account.accType,\r\n// //       userId: account.userId,\r\n// //     };\r\n\r\n// //     // Send PUT request for sender's account\r\n// //     axios\r\n// //       .put(\r\n// //         `http://localhost:8080/api/account/acc/${account.accNumber}`,\r\n// //         senderAccountBody,\r\n// //         { headers: { \"Content-Type\": \"application/json\" } }\r\n// //       )\r\n// //       .then((response) => {\r\n// //         console.log(\"Sender account updated:\", response.data);\r\n// //         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\r\n\r\n// //         // Now get receiver's account details and update\r\n// //         axios\r\n// //           .get(`http://localhost:8080/api/account/${receiverAccNumber}`)\r\n// //           .then((receiverResponse) => {\r\n// //             const receiverAccount = receiverResponse.data;\r\n\r\n// //             // Prepare updated receiver account body explicitly\r\n// //             const receiverAccountBody = {\r\n// //               accId: receiverAccount.accId,\r\n// //               userId: receiverAccount.userId,\r\n// //               accNumber: receiverAccNumber,\r\n// //               accBalance: receiverAccount.accBalance + Number(inputAmount),\r\n// //               accCreatedAt: receiverAccount.accCreatedAt,\r\n// //               accType: receiverAccount.accType,\r\n// //             };\r\n\r\n// //             // Send PUT request to update receiver's account balance\r\n// //             return axios.put(\r\n// //               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\r\n// //               receiverAccountBody,\r\n// //               { headers: { \"Content-Type\": \"application/json\" } }\r\n// //             );\r\n// //           })\r\n// //           .then((receiverUpdateResponse) => {\r\n// //             console.log(\r\n// //               \"Receiver account updated:\",\r\n// //               receiverUpdateResponse.data\r\n// //             );\r\n// //             setFundTransfer(false); // Close modal on success\r\n// //           })\r\n// //           .catch((error) => {\r\n// //             console.error(\"Error updating receiver's account:\", error);\r\n// //           });\r\n// //       })\r\n// //       .catch((error) => {\r\n// //         console.error(\"Error updating sender's account:\", error);\r\n// //       });\r\n// //   }\r\n\r\n// //   return ReactDOM.createPortal(\r\n// //     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\r\n// //       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n// //         <div className=\"deposit-inner\">\r\n// //           <h1>Fund Transfer</h1>\r\n// //           <form onSubmit={handleDeposit}>\r\n// //             <label className=\"amount-details\">Amount:</label>\r\n// //             <input\r\n// //               type=\"number\"\r\n// //               className=\"amount number-input\"\r\n// //               name=\"accBalance\"\r\n// //               value={inputAmount}\r\n// //               placeholder=\"Enter Amount Here\"\r\n// //               autoComplete=\"off\"\r\n// //               required\r\n// //               onChange={handleInputChange}\r\n// //             />\r\n// //             <label>Account Number</label>\r\n// //             <input\r\n// //               type=\"number\"\r\n// //               className=\"account-no number-input\"\r\n// //               placeholder=\"Enter Receiver Account Number\"\r\n// //               autoComplete=\"off\"\r\n// //               name=\"accountNo\"\r\n// //               required\r\n// //               onChange={handleReceiverAccChange}\r\n// //             />\r\n// //             <nav className=\"deposit-btn-div\">\r\n// //               <button type=\"submit\" className=\"deposit-btn\">\r\n// //                 FundTransafer\r\n// //               </button>\r\n// //             </nav>\r\n// //           </form>\r\n// //           <button\r\n// //             className=\"close-button\"\r\n// //             onClick={() => setFundTransfer(false)}\r\n// //           >\r\n// //             Close\r\n// //           </button>\r\n// //         </div>\r\n// //       </div>\r\n// //     </div>,\r\n// //     portalRoot\r\n// //   );\r\n// // }\r\n\r\n// // export default FundTransfer;\r\n// import ReactDOM from \"react-dom\";\r\n// import \"./deposit.css\";\r\n// import React, { useContext, useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { AccountContext } from \"../Context/AccountProvider\";\r\n\r\n// function FundTransfer({ setFundTransfer }) {\r\n//   const portalRoot = document.getElementById(\"portalRoot\");\r\n//   const { account, setAccount } = useContext(AccountContext);\r\n//   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\");\r\n//   const [inputAmount, setInputAmount] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     const userId = localStorage.getItem(\"userId\");\r\n//     const token = localStorage.getItem(\"authToken\");\r\n//     if (userId && token) {\r\n//       axios\r\n//         .get(`http://localhost:8080/api/account/userid/${userId}`, {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         })\r\n//         .then((response) => {\r\n//           setAccount(response.data);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching account data:\", error);\r\n//         });\r\n//     }\r\n//   }, [setAccount]);\r\n\r\n//   if (!portalRoot) {\r\n//     console.error(\"Portal root not found\");\r\n//     return null;\r\n//   }\r\n\r\n//   function handleInputChange(e) {\r\n//     setInputAmount(e.target.value);\r\n//   }\r\n\r\n//   function handleReceiverAccChange(e) {\r\n//     setReceiverAccNumber(e.target.value);\r\n//   }\r\n\r\n//   function handleDeposit(e) {\r\n//     e.preventDefault();\r\n//     const token = localStorage.getItem(\"authToken\");\r\n\r\n//     if (account.accBalance < inputAmount || account.accBalance === 0) {\r\n//       alert(\"Insufficient balance\");\r\n//       return;\r\n//     } else if (inputAmount < 0) {\r\n//       alert(\"Please insert a valid amount\");\r\n//       return;\r\n//     }\r\n\r\n//     const senderAccountBody = {\r\n//       accNumber: account.accNumber,\r\n//       accBalance: account.accBalance - Number(inputAmount),\r\n//       accCreatedAt: account.accCreatedAt,\r\n//       accType: account.accType,\r\n//       userId: account.userId,\r\n//     };\r\n\r\n//     axios\r\n//       .put(\r\n//         `http://localhost:8080/api/account/acc/${account.accNumber}`,\r\n//         senderAccountBody,\r\n//         {\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//             \"Authorization\": `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       )\r\n//       .then((response) => {\r\n//         console.log(\"Sender account updated:\", response.data);\r\n//         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\r\n\r\n//         axios\r\n//           .get(`http://localhost:8080/api/account/${receiverAccNumber}`, {\r\n//             headers: { Authorization: `Bearer ${token}` },\r\n//           })\r\n//           .then((receiverResponse) => {\r\n//             const receiverAccount = receiverResponse.data;\r\n\r\n//             const receiverAccountBody = {\r\n//               accId: receiverAccount.accId,\r\n//               userId: receiverAccount.userId,\r\n//               accNumber: receiverAccNumber,\r\n//               accBalance: receiverAccount.accBalance + Number(inputAmount),\r\n//               accCreatedAt: receiverAccount.accCreatedAt,\r\n//               accType: receiverAccount.accType,\r\n//             };\r\n\r\n//             return axios.put(\r\n//               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\r\n//               receiverAccountBody,\r\n//               {\r\n//                 headers: {\r\n//                   \"Content-Type\": \"application/json\",\r\n//                   \"Authorization\": `Bearer ${token}`,\r\n//                 },\r\n//               }\r\n//             );\r\n//           })\r\n//           .then((receiverUpdateResponse) => {\r\n//             console.log(\r\n//               \"Receiver account updated:\",\r\n//               receiverUpdateResponse.data\r\n//             );\r\n//             setFundTransfer(false);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error(\"Error updating receiver's account:\", error);\r\n//           });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error updating sender's account:\", error);\r\n//       });\r\n//   }\r\n\r\n//   return ReactDOM.createPortal(\r\n//     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\r\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n//         <div className=\"deposit-inner\">\r\n//           <h1>Fund Transfer</h1>\r\n//           <form onSubmit={handleDeposit}>\r\n//             <label className=\"amount-details\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"amount number-input\"\r\n//               name=\"accBalance\"\r\n//               value={inputAmount}\r\n//               placeholder=\"Enter Amount Here\"\r\n//               autoComplete=\"off\"\r\n//               required\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label>Account Number</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"account-no number-input\"\r\n//               placeholder=\"Enter Receiver Account Number\"\r\n//               autoComplete=\"off\"\r\n//               name=\"accountNo\"\r\n//               required\r\n//               onChange={handleReceiverAccChange}\r\n//             />\r\n//             <nav className=\"deposit-btn-div\">\r\n//               <button type=\"submit\" className=\"deposit-btn\">\r\n//                 Fund Transfer\r\n//               </button>\r\n//             </nav>\r\n//           </form>\r\n//           <button\r\n//             className=\"close-button\"\r\n//             onClick={() => setFundTransfer(false)}\r\n//           >\r\n//             Close\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>,\r\n//     portalRoot\r\n//   );\r\n// }\r\n\r\n// export default FundTransfer;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\nimport { AccountContext } from \"../Context/AccountProvider\";\r\nimport \"../Dashboard/fundTransfer.css\";\r\n\r\nfunction FundTransfer({ setFundTransfer }) {\r\n  const portalRoot = document.getElementById(\"portalRoot\");\r\n  const { account } = useContext(AccountContext);\r\n  const [fundData, setFundData] = useState({\r\n    userId: localStorage.getItem(\"userId\"),\r\n    userName: \"\",\r\n    userAddress: \"\",\r\n    accountNumber: account ? account.accNumber : \"\",\r\n    mobileNumber: \"\",\r\n    amountTransfered: 0,\r\n    transferDetails: \"\",\r\n    balance: account ? account.accBalance : 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n\r\n    if (userId && token) {\r\n      axios\r\n        .get(`http://localhost:8080/api/account/userid/${userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setFundData((prev) => ({\r\n            ...prev,\r\n            accountNumber: response.data.accNumber,\r\n          }));\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching account data:\", error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  if (!portalRoot) {\r\n    console.error(\"Portal root not found\");\r\n    return null;\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    const { name, value } = e.target;\r\n    setFundData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  function handleFundSubmission(e) {\r\n    e.preventDefault();\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    const newFund = {\r\n      ...fundData,\r\n      userId: userId,\r\n    };\r\n\r\n    console.log(\"Updated fund data before POST:\", newFund);\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/api/transaction\", newFund, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Fund transfer successfully recorded:\", res.data);\r\n        setFundTransfer(false);\r\n        // You might want to show a success message to the user here\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error recording fund transfer:\", error);\r\n        // You might want to show an error message to the user here\r\n      });\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"fund-overlay\" onClick={() => setFundTransfer(false)}>\r\n      <div className=\"fund-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"fund-inner\">\r\n          <h1>Fund Transfer</h1>\r\n          <form onSubmit={handleFundSubmission}>\r\n            <label className=\"input-label\">Full Name:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userName\"\r\n              className=\"input-field\"\r\n              autoComplete=\"off\"\r\n              value={fundData.userName}\r\n              placeholder=\"Enter your full name\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <label className=\"input-label\">Address:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userAddress\"\r\n              className=\"input-field\"\r\n              autoComplete=\"off\"\r\n              value={fundData.userAddress}\r\n              placeholder=\"Enter your address\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <label className=\"input-label\">Mobile Number:</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"mobileNumber\"\r\n              className=\"input-field\"\r\n              autoComplete=\"off\"\r\n              value={fundData.mobileNumber}\r\n              placeholder=\"Enter your mobile number\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <label className=\"input-label\">Amount:</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"amountTransfered\"\r\n              className=\"input-field\"\r\n              autoComplete=\"off\"\r\n              value={fundData.amountTransfered}\r\n              placeholder=\"Enter the amount to transfer\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <label className=\"input-label\">Transfer Details:</label>\r\n            <textarea\r\n              name=\"transferDetails\"\r\n              className=\"input-field\"\r\n              autoComplete=\"off\"\r\n              value={fundData.transferDetails}\r\n              placeholder=\"Enter transfer details\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n\r\n            <button type=\"submit\" className=\"submit-button\">\r\n              Transfer\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    portalRoot\r\n  );\r\n}\r\n\r\nexport default FundTransfer;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
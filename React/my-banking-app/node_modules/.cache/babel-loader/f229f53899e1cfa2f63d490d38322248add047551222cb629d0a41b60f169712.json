{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\Dashboard\\\\FundTransfer.js\",\n  _s = $RefreshSig$();\n// import ReactDOM from \"react-dom\";\n// import \"./deposit.css\";\n// import React, { useContext, useState } from \"react\";\n// import { useEffect } from \"react\";\n// import axios from \"axios\";\n// import { AccountContext } from \"../Context/AccountProvider\";\n\n// function FundTransfer({ setFundTransfer }) {\n//   const portalRoot = document.getElementById(\"portalRoot\");\n//   const { account, setAccount } = useContext(AccountContext);\n//   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\"); // For receiver's account number\n\n//   const [inputAmount, setInputAmount] = useState(\"\"); // Initialize with current balance or empty\n\n//   useEffect(() => {\n//     const userId = localStorage.getItem(\"userId\");\n//     if (userId) {\n//       axios\n//         .get(`http://localhost:8080/api/account/userid/${userId}`)\n//         .then((response) => {\n//           setAccount(response.data);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching account data:\", error);\n//         });\n//     }\n//   }, [setAccount]);\n\n//   if (!portalRoot) {\n//     console.error(\"Portal root not found\");\n//     return null;\n//   }\n\n//   // Handle input change\n//   function handleInputChange(e) {\n//     setInputAmount(e.target.value);\n//   }\n\n//   // Add a new handler for receiver's account number\n//   function handleReceiverAccChange(e) {\n//     setReceiverAccNumber(e.target.value);\n//   }\n\n//   function handleDeposit(e) {\n//     e.preventDefault();\n\n//     if (account.accBalance < inputAmount || account.accBalance === 0) {\n//       alert(\"Insufficient balance\");\n//       return;\n//     } else if (inputAmount < 0) {\n//       alert(\"Please insert a valid amount\");\n//       return;\n//     }\n\n//     // Prepare updated sender's account JSON body explicitly\n//     const senderAccountBody = {\n//       accNumber: account.accNumber,\n//       accBalance: account.accBalance - Number(inputAmount),\n//       accCreatedAt: account.accCreatedAt,\n//       accType: account.accType,\n//       userId: account.userId,\n//     };\n\n//     // Send PUT request for sender's account\n//     axios\n//       .put(\n//         `http://localhost:8080/api/account/acc/${account.accNumber}`,\n//         senderAccountBody,\n//         { headers: { \"Content-Type\": \"application/json\" } }\n//       )\n//       .then((response) => {\n//         console.log(\"Sender account updated:\", response.data);\n//         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\n\n//         // Now get receiver's account details and update\n//         axios\n//           .get(`http://localhost:8080/api/account/${receiverAccNumber}`)\n//           .then((receiverResponse) => {\n//             const receiverAccount = receiverResponse.data;\n\n//             // Prepare updated receiver account body explicitly\n//             const receiverAccountBody = {\n//               accId: receiverAccount.accId,\n//               userId: receiverAccount.userId,\n//               accNumber: receiverAccNumber,\n//               accBalance: receiverAccount.accBalance + Number(inputAmount),\n//               accCreatedAt: receiverAccount.accCreatedAt,\n//               accType: receiverAccount.accType,\n//             };\n\n//             // Send PUT request to update receiver's account balance\n//             return axios.put(\n//               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\n//               receiverAccountBody,\n//               { headers: { \"Content-Type\": \"application/json\" } }\n//             );\n//           })\n//           .then((receiverUpdateResponse) => {\n//             console.log(\n//               \"Receiver account updated:\",\n//               receiverUpdateResponse.data\n//             );\n//             setFundTransfer(false); // Close modal on success\n//           })\n//           .catch((error) => {\n//             console.error(\"Error updating receiver's account:\", error);\n//           });\n//       })\n//       .catch((error) => {\n//         console.error(\"Error updating sender's account:\", error);\n//       });\n//   }\n\n//   return ReactDOM.createPortal(\n//     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\n//         <div className=\"deposit-inner\">\n//           <h1>Fund Transfer</h1>\n//           <form onSubmit={handleDeposit}>\n//             <label className=\"amount-details\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               className=\"amount number-input\"\n//               name=\"accBalance\"\n//               value={inputAmount}\n//               placeholder=\"Enter Amount Here\"\n//               autoComplete=\"off\"\n//               required\n//               onChange={handleInputChange}\n//             />\n//             <label>Account Number</label>\n//             <input\n//               type=\"number\"\n//               className=\"account-no number-input\"\n//               placeholder=\"Enter Receiver Account Number\"\n//               autoComplete=\"off\"\n//               name=\"accountNo\"\n//               required\n//               onChange={handleReceiverAccChange}\n//             />\n//             <nav className=\"deposit-btn-div\">\n//               <button type=\"submit\" className=\"deposit-btn\">\n//                 FundTransafer\n//               </button>\n//             </nav>\n//           </form>\n//           <button\n//             className=\"close-button\"\n//             onClick={() => setFundTransfer(false)}\n//           >\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     </div>,\n//     portalRoot\n//   );\n// }\n\n// export default FundTransfer;\nimport ReactDOM from \"react-dom\";\nimport \"./deposit.css\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { AccountContext } from \"../Context/AccountProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FundTransfer({\n  setFundTransfer\n}) {\n  _s();\n  const portalRoot = document.getElementById(\"portalRoot\");\n  const {\n    account,\n    setAccount\n  } = useContext(AccountContext);\n  const [receiverAccNumber, setReceiverAccNumber] = useState(\"\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const token = localStorage.getItem(\"authToken\");\n    if (userId && token) {\n      axios.get(`http://localhost:8080/api/account/userid/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setAccount(response.data);\n      }).catch(error => {\n        console.error(\"Error fetching account data:\", error);\n      });\n    }\n  }, [setAccount]);\n  if (!portalRoot) {\n    console.error(\"Portal root not found\");\n    return null;\n  }\n  function handleInputChange(e) {\n    setInputAmount(e.target.value);\n  }\n  function handleReceiverAccChange(e) {\n    setReceiverAccNumber(e.target.value);\n  }\n  function handleDeposit(e) {\n    e.preventDefault();\n    const token = localStorage.getItem(\"authToken\");\n    if (account.accBalance < inputAmount || account.accBalance === 0) {\n      alert(\"Insufficient balance\");\n      return;\n    } else if (inputAmount < 0) {\n      alert(\"Please insert a valid amount\");\n      return;\n    }\n    const senderAccountBody = {\n      accNumber: account.accNumber,\n      accBalance: account.accBalance - Number(inputAmount),\n      accCreatedAt: account.accCreatedAt,\n      accType: account.accType,\n      userId: account.userId\n    };\n    axios.put(`http://localhost:8080/api/account/acc/${account.accNumber}`, senderAccountBody, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(response => {\n      console.log(\"Sender account updated:\", response.data);\n      setAccount({\n        ...account,\n        accBalance: senderAccountBody.accBalance\n      });\n      axios.get(`http://localhost:8080/api/account/${receiverAccNumber}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(receiverResponse => {\n        const receiverAccount = receiverResponse.data;\n        const receiverAccountBody = {\n          accId: receiverAccount.accId,\n          userId: receiverAccount.userId,\n          accNumber: receiverAccNumber,\n          accBalance: receiverAccount.accBalance + Number(inputAmount),\n          accCreatedAt: receiverAccount.accCreatedAt,\n          accType: receiverAccount.accType\n        };\n        return axios.put(`http://localhost:8080/api/account/acc/${receiverAccNumber}`, receiverAccountBody, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }).then(receiverUpdateResponse => {\n        console.log(\"Receiver account updated:\", receiverUpdateResponse.data);\n        setFundTransfer(false);\n      }).catch(error => {\n        console.error(\"Error updating receiver's account:\", error);\n      });\n    }).catch(error => {\n      console.error(\"Error updating sender's account:\", error);\n    });\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deposit-overlay\",\n    onClick: () => setFundTransfer(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deposit-modal\",\n      onClick: e => e.stopPropagation(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deposit-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Fund Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleDeposit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"amount-details\",\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"amount number-input\",\n            name: \"accBalance\",\n            value: inputAmount,\n            placeholder: \"Enter Amount Here\",\n            autoComplete: \"off\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Account Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"account-no number-input\",\n            placeholder: \"Enter Receiver Account Number\",\n            autoComplete: \"off\",\n            name: \"accountNo\",\n            required: true,\n            onChange: handleReceiverAccChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n            className: \"deposit-btn-div\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"deposit-btn\",\n              children: \"Fund Transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setFundTransfer(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this), portalRoot);\n}\n_s(FundTransfer, \"dZRbBMWYNIFiIGso7tdPNIcrHl0=\");\n_c = FundTransfer;\nexport default FundTransfer;\nvar _c;\n$RefreshReg$(_c, \"FundTransfer\");","map":{"version":3,"names":["ReactDOM","React","useContext","useState","useEffect","axios","AccountContext","jsxDEV","_jsxDEV","FundTransfer","setFundTransfer","_s","portalRoot","document","getElementById","account","setAccount","receiverAccNumber","setReceiverAccNumber","inputAmount","setInputAmount","userId","localStorage","getItem","token","get","headers","Authorization","then","response","data","catch","error","console","handleInputChange","e","target","value","handleReceiverAccChange","handleDeposit","preventDefault","accBalance","alert","senderAccountBody","accNumber","Number","accCreatedAt","accType","put","log","receiverResponse","receiverAccount","receiverAccountBody","accId","receiverUpdateResponse","createPortal","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","placeholder","autoComplete","required","onChange","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/Dashboard/FundTransfer.js"],"sourcesContent":["// import ReactDOM from \"react-dom\";\r\n// import \"./deposit.css\";\r\n// import React, { useContext, useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { AccountContext } from \"../Context/AccountProvider\";\r\n\r\n// function FundTransfer({ setFundTransfer }) {\r\n//   const portalRoot = document.getElementById(\"portalRoot\");\r\n//   const { account, setAccount } = useContext(AccountContext);\r\n//   const [receiverAccNumber, setReceiverAccNumber] = useState(\"\"); // For receiver's account number\r\n\r\n//   const [inputAmount, setInputAmount] = useState(\"\"); // Initialize with current balance or empty\r\n\r\n//   useEffect(() => {\r\n//     const userId = localStorage.getItem(\"userId\");\r\n//     if (userId) {\r\n//       axios\r\n//         .get(`http://localhost:8080/api/account/userid/${userId}`)\r\n//         .then((response) => {\r\n//           setAccount(response.data);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching account data:\", error);\r\n//         });\r\n//     }\r\n//   }, [setAccount]);\r\n\r\n//   if (!portalRoot) {\r\n//     console.error(\"Portal root not found\");\r\n//     return null;\r\n//   }\r\n\r\n//   // Handle input change\r\n//   function handleInputChange(e) {\r\n//     setInputAmount(e.target.value);\r\n//   }\r\n\r\n//   // Add a new handler for receiver's account number\r\n//   function handleReceiverAccChange(e) {\r\n//     setReceiverAccNumber(e.target.value);\r\n//   }\r\n\r\n//   function handleDeposit(e) {\r\n//     e.preventDefault();\r\n\r\n//     if (account.accBalance < inputAmount || account.accBalance === 0) {\r\n//       alert(\"Insufficient balance\");\r\n//       return;\r\n//     } else if (inputAmount < 0) {\r\n//       alert(\"Please insert a valid amount\");\r\n//       return;\r\n//     }\r\n\r\n//     // Prepare updated sender's account JSON body explicitly\r\n//     const senderAccountBody = {\r\n//       accNumber: account.accNumber,\r\n//       accBalance: account.accBalance - Number(inputAmount),\r\n//       accCreatedAt: account.accCreatedAt,\r\n//       accType: account.accType,\r\n//       userId: account.userId,\r\n//     };\r\n\r\n//     // Send PUT request for sender's account\r\n//     axios\r\n//       .put(\r\n//         `http://localhost:8080/api/account/acc/${account.accNumber}`,\r\n//         senderAccountBody,\r\n//         { headers: { \"Content-Type\": \"application/json\" } }\r\n//       )\r\n//       .then((response) => {\r\n//         console.log(\"Sender account updated:\", response.data);\r\n//         setAccount({ ...account, accBalance: senderAccountBody.accBalance });\r\n\r\n//         // Now get receiver's account details and update\r\n//         axios\r\n//           .get(`http://localhost:8080/api/account/${receiverAccNumber}`)\r\n//           .then((receiverResponse) => {\r\n//             const receiverAccount = receiverResponse.data;\r\n\r\n//             // Prepare updated receiver account body explicitly\r\n//             const receiverAccountBody = {\r\n//               accId: receiverAccount.accId,\r\n//               userId: receiverAccount.userId,\r\n//               accNumber: receiverAccNumber,\r\n//               accBalance: receiverAccount.accBalance + Number(inputAmount),\r\n//               accCreatedAt: receiverAccount.accCreatedAt,\r\n//               accType: receiverAccount.accType,\r\n//             };\r\n\r\n//             // Send PUT request to update receiver's account balance\r\n//             return axios.put(\r\n//               `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\r\n//               receiverAccountBody,\r\n//               { headers: { \"Content-Type\": \"application/json\" } }\r\n//             );\r\n//           })\r\n//           .then((receiverUpdateResponse) => {\r\n//             console.log(\r\n//               \"Receiver account updated:\",\r\n//               receiverUpdateResponse.data\r\n//             );\r\n//             setFundTransfer(false); // Close modal on success\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error(\"Error updating receiver's account:\", error);\r\n//           });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error updating sender's account:\", error);\r\n//       });\r\n//   }\r\n\r\n//   return ReactDOM.createPortal(\r\n//     <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\r\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n//         <div className=\"deposit-inner\">\r\n//           <h1>Fund Transfer</h1>\r\n//           <form onSubmit={handleDeposit}>\r\n//             <label className=\"amount-details\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"amount number-input\"\r\n//               name=\"accBalance\"\r\n//               value={inputAmount}\r\n//               placeholder=\"Enter Amount Here\"\r\n//               autoComplete=\"off\"\r\n//               required\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <label>Account Number</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"account-no number-input\"\r\n//               placeholder=\"Enter Receiver Account Number\"\r\n//               autoComplete=\"off\"\r\n//               name=\"accountNo\"\r\n//               required\r\n//               onChange={handleReceiverAccChange}\r\n//             />\r\n//             <nav className=\"deposit-btn-div\">\r\n//               <button type=\"submit\" className=\"deposit-btn\">\r\n//                 FundTransafer\r\n//               </button>\r\n//             </nav>\r\n//           </form>\r\n//           <button\r\n//             className=\"close-button\"\r\n//             onClick={() => setFundTransfer(false)}\r\n//           >\r\n//             Close\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>,\r\n//     portalRoot\r\n//   );\r\n// }\r\n\r\n// export default FundTransfer;\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./deposit.css\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AccountContext } from \"../Context/AccountProvider\";\r\n\r\nfunction FundTransfer({ setFundTransfer }) {\r\n  const portalRoot = document.getElementById(\"portalRoot\");\r\n  const { account, setAccount } = useContext(AccountContext);\r\n  const [receiverAccNumber, setReceiverAccNumber] = useState(\"\");\r\n  const [inputAmount, setInputAmount] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (userId && token) {\r\n      axios\r\n        .get(`http://localhost:8080/api/account/userid/${userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setAccount(response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching account data:\", error);\r\n        });\r\n    }\r\n  }, [setAccount]);\r\n\r\n  if (!portalRoot) {\r\n    console.error(\"Portal root not found\");\r\n    return null;\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    setInputAmount(e.target.value);\r\n  }\r\n\r\n  function handleReceiverAccChange(e) {\r\n    setReceiverAccNumber(e.target.value);\r\n  }\r\n\r\n  function handleDeposit(e) {\r\n    e.preventDefault();\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    if (account.accBalance < inputAmount || account.accBalance === 0) {\r\n      alert(\"Insufficient balance\");\r\n      return;\r\n    } else if (inputAmount < 0) {\r\n      alert(\"Please insert a valid amount\");\r\n      return;\r\n    }\r\n\r\n    const senderAccountBody = {\r\n      accNumber: account.accNumber,\r\n      accBalance: account.accBalance - Number(inputAmount),\r\n      accCreatedAt: account.accCreatedAt,\r\n      accType: account.accType,\r\n      userId: account.userId,\r\n    };\r\n\r\n    axios\r\n      .put(\r\n        `http://localhost:8080/api/account/acc/${account.accNumber}`,\r\n        senderAccountBody,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${token}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(\"Sender account updated:\", response.data);\r\n        setAccount({ ...account, accBalance: senderAccountBody.accBalance });\r\n\r\n        axios\r\n          .get(`http://localhost:8080/api/account/${receiverAccNumber}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((receiverResponse) => {\r\n            const receiverAccount = receiverResponse.data;\r\n\r\n            const receiverAccountBody = {\r\n              accId: receiverAccount.accId,\r\n              userId: receiverAccount.userId,\r\n              accNumber: receiverAccNumber,\r\n              accBalance: receiverAccount.accBalance + Number(inputAmount),\r\n              accCreatedAt: receiverAccount.accCreatedAt,\r\n              accType: receiverAccount.accType,\r\n            };\r\n\r\n            return axios.put(\r\n              `http://localhost:8080/api/account/acc/${receiverAccNumber}`,\r\n              receiverAccountBody,\r\n              {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  \"Authorization\": `Bearer ${token}`,\r\n                },\r\n              }\r\n            );\r\n          })\r\n          .then((receiverUpdateResponse) => {\r\n            console.log(\r\n              \"Receiver account updated:\",\r\n              receiverUpdateResponse.data\r\n            );\r\n            setFundTransfer(false);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error updating receiver's account:\", error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error updating sender's account:\", error);\r\n      });\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"deposit-overlay\" onClick={() => setFundTransfer(false)}>\r\n      <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"deposit-inner\">\r\n          <h1>Fund Transfer</h1>\r\n          <form onSubmit={handleDeposit}>\r\n            <label className=\"amount-details\">Amount:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"amount number-input\"\r\n              name=\"accBalance\"\r\n              value={inputAmount}\r\n              placeholder=\"Enter Amount Here\"\r\n              autoComplete=\"off\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n            <label>Account Number</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"account-no number-input\"\r\n              placeholder=\"Enter Receiver Account Number\"\r\n              autoComplete=\"off\"\r\n              name=\"accountNo\"\r\n              required\r\n              onChange={handleReceiverAccChange}\r\n            />\r\n            <nav className=\"deposit-btn-div\">\r\n              <button type=\"submit\" className=\"deposit-btn\">\r\n                Fund Transfer\r\n              </button>\r\n            </nav>\r\n          </form>\r\n          <button\r\n            className=\"close-button\"\r\n            onClick={() => setFundTransfer(false)}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    portalRoot\r\n  );\r\n}\r\n\r\nexport default FundTransfer;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAO,eAAe;AACtB,OAAOC,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,YAAYA,CAAC;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EACxD,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGd,UAAU,CAACI,cAAc,CAAC;EAC1D,MAAM,CAACW,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACgB,WAAW,EAAEC,c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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
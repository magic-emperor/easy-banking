{"ast":null,"code":"function onSubmit(event) {\n  event.preventDefault();\n  const newErrors = {\n    first_Name: !form.first_Name,\n    mobile: !form.mobile,\n    email: !form.email,\n    password: !form.password,\n    confirmPass: !form.confirmPass,\n    terms: !form.terms,\n    passwordMismatch: form.password !== form.confirmPass\n  };\n  setErrors(newErrors);\n  if (Object.values(newErrors).some(error => error)) {\n    console.log(\"Please fill all the details correctly.\");\n    return;\n  }\n\n  // Proceed if all fields are filled and passwords match\n  console.log(\"Registration successful:\", form);\n  setForm({\n    first_Name: \"\",\n    last_Name: \"\",\n    mobile: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPass: \"\",\n    terms: false\n  });\n\n  // First, create the user\n  axios.post(\"http://localhost:8080/api/users\", form, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    const userId = response.data.id; // Get the user ID from the response\n\n    console.log(\"User created with ID:\", userId);\n\n    // Now create the account after getting user ID\n    const randomPart = Math.floor(Math.random() * 10000);\n    const randomNumber = \"7000\" + randomPart;\n    const account = {\n      userId: userId,\n      // Use the obtained user ID\n      accNumber: randomNumber,\n      accBalance: 0,\n      accCreatedAt: new Date(),\n      accType: \"\"\n    };\n    return axios.post(accountApi, account, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }).then(accountResponse => {\n    console.log(\"Account created:\", accountResponse.data);\n  }).catch(error => {\n    console.log(\"Error:\", error);\n  });\n}","map":{"version":3,"names":["onSubmit","event","preventDefault","newErrors","first_Name","form","mobile","email","password","confirmPass","terms","passwordMismatch","setErrors","Object","values","some","error","console","log","setForm","last_Name","axios","post","headers","then","response","userId","data","id","randomPart","Math","floor","random","randomNumber","account","accNumber","accBalance","accCreatedAt","Date","accType","accountApi","accountResponse","catch"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/Register/Register.js"],"sourcesContent":["function onSubmit(event) {\r\n  event.preventDefault();\r\n\r\n  const newErrors = {\r\n    first_Name: !form.first_Name,\r\n    mobile: !form.mobile,\r\n    email: !form.email,\r\n    password: !form.password,\r\n    confirmPass: !form.confirmPass,\r\n    terms: !form.terms,\r\n    passwordMismatch: form.password !== form.confirmPass,\r\n  };\r\n\r\n  setErrors(newErrors);\r\n\r\n  if (Object.values(newErrors).some((error) => error)) {\r\n    console.log(\"Please fill all the details correctly.\");\r\n    return;\r\n  }\r\n\r\n  // Proceed if all fields are filled and passwords match\r\n  console.log(\"Registration successful:\", form);\r\n\r\n  setForm({\r\n    first_Name: \"\",\r\n    last_Name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPass: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  // First, create the user\r\n  axios\r\n    .post(\"http://localhost:8080/api/users\", form, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    .then((response) => {\r\n      const userId = response.data.id; // Get the user ID from the response\r\n\r\n      console.log(\"User created with ID:\", userId);\r\n\r\n      // Now create the account after getting user ID\r\n      const randomPart = Math.floor(Math.random() * 10000);\r\n      const randomNumber = \"7000\" + randomPart;\r\n      const account = {\r\n        userId: userId, // Use the obtained user ID\r\n        accNumber: randomNumber,\r\n        accBalance: 0,\r\n        accCreatedAt: new Date(),\r\n        accType: \"\",\r\n      };\r\n\r\n      return axios.post(accountApi, account, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n    })\r\n    .then((accountResponse) => {\r\n      console.log(\"Account created:\", accountResponse.data);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Error:\", error);\r\n    });\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,KAAK,EAAE;EACvBA,KAAK,CAACC,cAAc,CAAC,CAAC;EAEtB,MAAMC,SAAS,GAAG;IAChBC,UAAU,EAAE,CAACC,IAAI,CAACD,UAAU;IAC5BE,MAAM,EAAE,CAACD,IAAI,CAACC,MAAM;IACpBC,KAAK,EAAE,CAACF,IAAI,CAACE,KAAK;IAClBC,QAAQ,EAAE,CAACH,IAAI,CAACG,QAAQ;IACxBC,WAAW,EAAE,CAACJ,IAAI,CAACI,WAAW;IAC9BC,KAAK,EAAE,CAACL,IAAI,CAACK,KAAK;IAClBC,gBAAgB,EAAEN,IAAI,CAACG,QAAQ,KAAKH,IAAI,CAACI;EAC3C,CAAC;EAEDG,SAAS,CAACT,SAAS,CAAC;EAEpB,IAAIU,MAAM,CAACC,MAAM,CAACX,SAAS,CAAC,CAACY,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAAC,EAAE;IACnDC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD;EACF;;EAEA;EACAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEb,IAAI,CAAC;EAE7Cc,OAAO,CAAC;IACNf,UAAU,EAAE,EAAE;IACdgB,SAAS,EAAE,EAAE;IACbd,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF;EACAW,KAAK,CACFC,IAAI,CAAC,iCAAiC,EAAEjB,IAAI,EAAE;IAC7CkB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CACDC,IAAI,CAAEC,QAAQ,IAAK;IAClB,MAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAI,CAACC,EAAE,CAAC,CAAC;;IAEjCX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEQ,MAAM,CAAC;;IAE5C;IACA,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC;IACpD,MAAMC,YAAY,GAAG,MAAM,GAAGJ,UAAU;IACxC,MAAMK,OAAO,GAAG;MACdR,MAAM,EAAEA,MAAM;MAAE;MAChBS,SAAS,EAAEF,YAAY;MACvBG,UAAU,EAAE,CAAC;MACbC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC;MACxBC,OAAO,EAAE;IACX,CAAC;IAED,OAAOlB,KAAK,CAACC,IAAI,CAACkB,UAAU,EAAEN,OAAO,EAAE;MACrCX,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,CACDC,IAAI,CAAEiB,eAAe,IAAK;IACzBxB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEuB,eAAe,CAACd,IAAI,CAAC;EACvD,CAAC,CAAC,CACDe,KAAK,CAAE1B,KAAK,IAAK;IAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;EAC9B,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
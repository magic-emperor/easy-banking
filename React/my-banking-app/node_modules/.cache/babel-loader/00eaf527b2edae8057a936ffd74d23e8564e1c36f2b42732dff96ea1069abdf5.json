{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\login-page\\\\Login.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../login-page/login.css\";\n// // import APIStored from \"../API/APIStored\";\n// // import axios from \"axios\";\n// // import image from \"../../image/login-backgroundImage.jpg\";\n\n// // function Login() {\n// //   const navigate = useNavigate();\n\n// //   const [login, setLogin] = useState({\n// //     userName: \"\",\n// //     password: \"\",\n// //   });\n\n// //   const [error, setError] = useState({\n// //     userName: false,\n// //     password: false,\n// //   });\n\n// //   const [data, setData] = useState([]);\n\n// //   useEffect(() => {\n// //     APIStored()\n// //       .then((response) => {\n// //         console.log(response.data);\n// //         setData(response.data);\n// //       })\n// //       .catch((error) => console.error(\"Error fetching data\", error));\n// //   }, []);\n\n// //   async function onLogin(event) {\n// //     event.preventDefault();\n\n// //     const newError = {\n// //       userName: !login.userName,\n// //       password: !login.password,\n// //     };\n\n// //     setError(newError);\n\n// //     if (Object.values(newError).some((fieldError) => fieldError)) {\n// //       console.log(\"Mandatory details are not filled\");\n// //       return;\n// //     }\n\n// //     try {\n// //       const response = await axios.post(\n// //         \"http://localhost:8080/api/authenticate\",\n// //         {\n// //           username: login.userName,\n// //           password: login.password,\n// //         }\n// //       );\n\n// //       console.log(\"Full Response:\", response);\n\n// //       if (response.status === 200) {\n// //         const token = response.data.jwt;\n// //         console.log(\"Received Token:\", token);\n\n// //         // Parse the JWT to extract user ID\n// //         const tokenData = await parseJwt(token);\n// //         console.log(\"Token Data:\", tokenData);\n\n// //         // Store JWT token and user ID in localStorage\n// //         localStorage.setItem(\"authToken\", token); // Store the full token\n// //         const userId = tokenData.id;\n// //         // setTimeout(() => {\n// //         //   const storedUserId = localStorage.getItem(\"userId\");\n// //         //   console.log(\"Stored User ID:\", storedUserId);\n// //         // }, 1000); // Store the parsed user ID\n\n// //         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n// //         localStorage.setItem(\"userId\", userId);\n// //         const storedUserId = localStorage.getItem(\"userId\");\n// //         console.log(\"Stored User ID:\", storedUserId);\n// //         sessionStorage.setItem(\"userId\", userId);\n\n// //         // const userId = localStorage.getItem(\"userId\");\n// //         if (!userId) {\n// //           console.error(\"Error: userId is null or undefined\");\n// //           return;\n// //         }\n\n// //         const accountResponse = await axios.get(\n// //           `http://localhost:8080/api/account/userid/${userId}`\n// //         );\n// //         const userResponse = await axios.get(\n// //           `http://localhost:8080/api/users/${userId}`\n// //         );\n\n// //         navigate(`/dashboard/${userId}`, {\n// //           state: {\n// //             JWTaccount: accountResponse.data,\n// //             SetJWTuser: userResponse.data,\n// //           },\n// //         });\n// //       } else {\n// //         setError({\n// //           userName: true,\n// //           password: true,\n// //         });\n// //         console.log(\"Invalid username or password\");\n// //       }\n// //     } catch (error) {\n// //       setError({\n// //         userName: true,\n// //         password: true,\n// //       });\n// //       console.error(\"Authentication failed\", error);\n// //     }\n// //   }\n\n// //   function onForgotPassword() {\n// //     navigate(\"/forgot-password\");\n// //   }\n\n// //   function parseJwt(token) {\n// //     if (!token) {\n// //       console.error(\"Token is undefined or null\");\n// //       return {};\n// //     }\n// //     try {\n// //       const base64Url = token.split(\".\")[1];\n// //       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n// //       const payload = JSON.parse(window.atob(base64));\n// //       return {\n// //         id: payload.userId,\n// //         email: payload.sub,\n// //       };\n// //     } catch (error) {\n// //       console.error(\"Error parsing JWT token:\", error);\n// //       return {};\n// //     }\n// //   }\n\n// //   function onLoginChange(event) {\n// //     const { name, value } = event.target;\n// //     setLogin((prevLoginData) => ({\n// //       ...prevLoginData,\n// //       [name]: value,\n// //     }));\n\n// //     setError((prevError) => ({\n// //       ...prevError,\n// //       [name]: !value,\n// //     }));\n// //   }\n\n// //   return (\n// //     <div className=\"Login-page\">\n// //       <form className=\"Login-form\" onSubmit={onLogin}>\n// //         <h1 className=\"Login-text\">Login</h1>\n// //         <div className=\"input-group\">\n// //           <label>Email ID</label>\n// //           <input\n// //             type=\"text\"\n// //             name=\"userName\"\n// //             autoComplete=\"off\"\n// //             placeholder=\"Email ID\"\n// //             className={`login-userName ${\n// //               error.userName ? \"login-input-error\" : \"\"\n// //             }`}\n// //             onChange={onLoginChange}\n// //             value={login.userName}\n// //           />\n// //           {error.userName && (\n// //             <span className=\"error-text\">Please Enter User ID</span>\n// //           )}\n// //         </div>\n// //         <div className=\"input-group\">\n// //           <label>Password</label>\n// //           <input\n// //             type=\"password\"\n// //             name=\"password\"\n// //             autoComplete=\"off\"\n// //             placeholder=\"Password\"\n// //             className={`login-password ${\n// //               error.password ? \"login-input-error\" : \"\"\n// //             }`}\n// //             onChange={onLoginChange}\n// //             value={login.password}\n// //           />\n// //           {error.password && (\n// //             <span className=\"error-text\">Please Enter Password</span>\n// //           )}\n// //         </div>\n// //         <button className=\"Login-btn\" type=\"submit\">\n// //           Login\n// //         </button>\n// //         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\n// //           Forgot Password?\n// //         </p>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default Login;\n// // import React, { useState } from \"react\";\n// // import { useNavigate } from \"react-router-dom\";\n// // import \"../login-page/login.css\";\n// // import axios from \"axios\";\n// // // import image from \"../../image/login-backgroundImage.jpg\";\n\n// // function Login() {\n// //   console.log(\"1. Start of onLogin function\");\n// //   const navigate = useNavigate();\n// //   console.log(\"2. After preventDefault\");\n// //   const [login, setLogin] = useState({\n// //     userName: \"\",\n// //     password: \"\",\n// //   });\n\n// //   const [error, setError] = useState({\n// //     userName: false,\n// //     password: false,\n// //   });\n\n// //   async function onLogin(event) {\n// //     try {\n// //       console.log(\"1. Start of onLogin function\");\n// //       event.preventDefault();\n\n// //       const newError = {\n// //         userName: !login.userName,\n// //         password: !login.password,\n// //       };\n// //       console.log(\"3. New error state:\", newError);\n// //       setError(newError);\n\n// //       if (Object.values(newError).some((fieldError) => fieldError)) {\n// //         console.log(\"Mandatory details are not filled\");\n// //         return;\n// //       }\n\n// //       // Check for admin credentials\n// //       if (\n// //         login.userName === \"admin@easybanking.com\" &&\n// //         login.password === \"admin@easy123\"\n// //       ) {\n// //         handleAdminLogin();\n// //         return;\n// //       }\n\n// //       try {\n// //         const response = await axios.post(\n// //           \"http://localhost:8080/api/authenticate\",\n// //           {\n// //             username: login.userName,\n// //             password: login.password,\n// //           }\n// //         );\n\n// //         console.log(\"Full Response:\", response);\n\n// //         if (response.status === 200) {\n// //           const token = response.data.jwt;\n// //           console.log(\"Received Token:\", token);\n\n// //           const tokenData = await parseJwt(token);\n// //           console.log(\"Token Data:\", tokenData);\n\n// //           localStorage.setItem(\"authToken\", token);\n// //           const userId = tokenData.id;\n// //           console.log(\"User ID:\", userId);\n\n// //           axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n// //           localStorage.setItem(\"userId\", userId);\n// //           sessionStorage.setItem(\"userId\", userId);\n// //           console.log(\"Fetching user data...\");\n// //           const accountResponse = await axios.get(\n// //             `http://localhost:8080/api/account/userid/${userId}`\n// //           );\n// //           console.log(\"Account Response:\", accountResponse.data);\n// //           console.log(\"Fetching user data...\");\n// //           const userResponse = await axios.get(\n// //             `http://localhost:8080/api/users/${userId}`\n// //           );\n// //           console.log(\"User Response:\", userResponse.data);\n// //           console.log(userResponse.data);\n// //           navigate(`/dashboard/${userId}`, {\n// //             state: {\n// //               JWTaccount: accountResponse.data,\n// //               SetJWTuser: userResponse.data,\n// //             },\n// //           });\n// //         } else {\n// //           console.log(\"Unexpected response status:\", response.status);\n// //           setError({\n// //             userName: true,\n// //             password: true,\n// //           });\n// //           console.log(\"Invalid username or password\");\n// //         }\n// //       } catch (error) {\n// //         setError({\n// //           userName: true,\n// //           password: true,\n// //         });\n// //         console.error(\"Authentication failed\", error);\n// //         console.error(\"Authentication failed\", error);\n// //         if (error.response) {\n// //           console.error(\"Response data:\", error.response.data);\n// //           console.error(\"Response status:\", error.response.status);\n// //           console.error(\"Response headers:\", error.response.headers);\n// //         } else if (error.request) {\n// //           console.error(\"No response received:\", error.request);\n// //         } else {\n// //           console.error(\"Error setting up request:\", error.message);\n// //         }\n// //       }\n// //     } catch {\n// //       console.error(\"Unexpected error in onLogin:\", error);\n// //     }\n// //   }\n// //   console.log(\"5. Before return statement\");\n// //   function handleAdminLogin() {\n// //     // Generate a simple admin token (in a real app, this should be done server-side)\n// //     const adminToken = btoa(\n// //       JSON.stringify({ role: \"admin\", email: login.userName })\n// //     );\n// //     localStorage.setItem(\"adminToken\", adminToken);\n// //     navigate(\"/admin\", { state: { adminJWT: adminToken } });\n// //   }\n\n// //   function onForgotPassword() {\n// //     navigate(\"/forgot-password\");\n// //   }\n\n// //   function parseJwt(token) {\n// //     if (!token) {\n// //       console.error(\"Token is undefined or null\");\n// //       return {};\n// //     }\n// //     try {\n// //       const base64Url = token.split(\".\")[1];\n// //       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n// //       const payload = JSON.parse(window.atob(base64));\n// //       console.log(\"Full JWT payload:\", payload);\n// //       return {\n// //         id: payload.userId,\n// //         email: payload.sub,\n// //       };\n// //     } catch (error) {\n// //       console.error(\"Error parsing JWT token:\", error);\n// //       return {};\n// //     }\n// //   }\n\n// //   function onLoginChange(event) {\n// //     console.log(\"21. onLoginChange called\");\n// //     const { name, value } = event.target;\n// //     setLogin((prevLoginData) => ({\n// //       ...prevLoginData,\n// //       [name]: value,\n// //     }));\n\n// //     setError((prevError) => ({\n// //       ...prevError,\n// //       [name]: !value,\n// //     }));\n// //   }\n\n// //   return (\n// //     <div className=\"Login-page\">\n// //       <form className=\"Login-form\" onSubmit={onLogin}>\n// //         <h1 className=\"Login-text\">Login</h1>\n// //         <div className=\"input-group\">\n// //           <label>Email ID</label>\n// //           <input\n// //             type=\"text\"\n// //             name=\"userName\"\n// //             autoComplete=\"off\"\n// //             placeholder=\"Email ID\"\n// //             className={`login-userName ${\n// //               error.userName ? \"login-input-error\" : \"\"\n// //             }`}\n// //             onChange={onLoginChange}\n// //             value={login.userName}\n// //           />\n// //           {error.userName && (\n// //             <span className=\"error-text\">Please Enter User ID</span>\n// //           )}\n// //         </div>\n// //         <div className=\"input-group\">\n// //           <label>Password</label>\n// //           <input\n// //             type=\"password\"\n// //             name=\"password\"\n// //             autoComplete=\"off\"\n// //             placeholder=\"Password\"\n// //             className={`login-password ${\n// //               error.password ? \"login-input-error\" : \"\"\n// //             }`}\n// //             onChange={onLoginChange}\n// //             value={login.password}\n// //           />\n// //           {error.password && (\n// //             <span className=\"error-text\">Please Enter Password</span>\n// //           )}\n// //         </div>\n// //         <button className=\"Login-btn\" type=\"submit\">\n// //           Login\n// //         </button>\n// //         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\n// //           Forgot Password?\n// //         </p>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default Login;\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../login-page/login.css\";\n// import axios from \"axios\";\n// // import image from \"../../image/login-backgroundImage.jpg\";\n\n// function Login() {\n//   console.log(\"1. Start of onLogin function\");\n//   const navigate = useNavigate();\n//   console.log(\"2. After preventDefault\");\n//   const [login, setLogin] = useState({\n//     userName: \"\",\n//     password: \"\",\n//   });\n\n//   const [error, setError] = useState({\n//     userName: false,\n//     password: false,\n//   });\n\n//   function onLogin(event) {\n//     try {\n//       console.log(\"1. Start of onLogin function\");\n//       event.preventDefault();\n\n//       const newError = {\n//         userName: !login.userName,\n//         password: !login.password,\n//       };\n//       console.log(\"3. New error state:\", newError);\n//       setError(newError);\n\n//       if (Object.values(newError).some((fieldError) => fieldError)) {\n//         console.log(\"Mandatory details are not filled\");\n//         return;\n//       }\n\n//       // Check for admin credentials\n//       if (\n//         login.userName === \"admin@easybanking.com\" &&\n//         login.password === \"admin@easy123\"\n//       ) {\n//         handleAdminLogin();\n//         return;\n//       }\n\n//       axios\n//         .post(\"http://localhost:8080/api/authenticate\", {\n//           username: login.userName,\n//           password: login.password,\n//         })\n//         .then((response) => {\n//           console.log(\"Full Response:\", response);\n\n//           if (response.status === 200) {\n//             const token = response.data.jwt;\n//             console.log(\"Received Token:\", token);\n\n//             parseJwt(token).then((tokenData) => {\n//               console.log(\"Token Data:\", tokenData);\n\n//               localStorage.setItem(\"authToken\", token);\n//               const userId = tokenData.id;\n//               console.log(\"User ID:\", userId);\n\n//               axios.defaults.headers.common[\n//                 \"Authorization\"\n//               ] = `Bearer ${token}`;\n//               localStorage.setItem(\"userId\", userId);\n//               sessionStorage.setItem(\"userId\", userId);\n//               console.log(\"Fetching user data...\");\n\n//               Promise.all([\n//                 axios.get(`http://localhost:8080/api/account/userid/${userId}`),\n//                 axios.get(`http://localhost:8080/api/users/${userId}`),\n//               ]).then(([accountResponse, userResponse]) => {\n//                 console.log(\"Account Response:\", accountResponse.data);\n//                 console.log(\"Fetching user data...\");\n//                 console.log(\"User Response:\", userResponse.data);\n//                 console.log(userResponse.data);\n//                 navigate(`/dashboard/${userId}`, {\n//                   state: {\n//                     JWTaccount: accountResponse.data,\n//                     SetJWTuser: userResponse.data,\n//                   },\n//                 });\n//               });\n//             });\n//           } else {\n//             console.log(\"Unexpected response status:\", response.status);\n//             setError({\n//               userName: true,\n//               password: true,\n//             });\n//             console.log(\"Invalid username or password\");\n//           }\n//         })\n//         .catch((error) => {\n//           setError({\n//             userName: true,\n//             password: true,\n//           });\n//           console.error(\"Authentication failed\", error);\n//           console.error(\"Authentication failed\", error);\n//           if (error.response) {\n//             console.error(\"Response data:\", error.response.data);\n//             console.error(\"Response status:\", error.response.status);\n//             console.error(\"Response headers:\", error.response.headers);\n//           } else if (error.request) {\n//             console.error(\"No response received:\", error.request);\n//           } else {\n//             console.error(\"Error setting up request:\", error.message);\n//           }\n//         });\n//     } catch (error) {\n//       console.error(\"Unexpected error in onLogin:\", error);\n//     }\n//   }\n//   console.log(\"5. Before return statement\");\n//   function handleAdminLogin() {\n//     // Generate a simple admin token (in a real app, this should be done server-side)\n//     const adminToken = btoa(\n//       JSON.stringify({ role: \"admin\", email: login.userName })\n//     );\n//     localStorage.setItem(\"adminToken\", adminToken);\n//     navigate(\"/admin\", { state: { adminJWT: adminToken } });\n//   }\n\n//   function onForgotPassword() {\n//     navigate(\"/forgot-password\");\n//   }\n\n//   function parseJwt(token) {\n//     return new Promise((resolve, reject) => {\n//       if (!token) {\n//         console.error(\"Token is undefined or null\");\n//         reject({});\n//       }\n//       try {\n//         const base64Url = token.split(\".\")[1];\n//         const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n//         const payload = JSON.parse(window.atob(base64));\n//         console.log(\"Full JWT payload:\", payload);\n//         resolve({\n//           id: payload.userId,\n//           email: payload.sub,\n//         });\n//       } catch (error) {\n//         console.error(\"Error parsing JWT token:\", error);\n//         reject({});\n//       }\n//     });\n//   }\n\n//   function onLoginChange(event) {\n//     console.log(\"21. onLoginChange called\");\n//     const { name, value } = event.target;\n//     setLogin((prevLoginData) => ({\n//       ...prevLoginData,\n//       [name]: value,\n//     }));\n\n//     setError((prevError) => ({\n//       ...prevError,\n//       [name]: !value,\n//     }));\n//   }\n\n//   return (\n//     <div className=\"Login-page\">\n//       <form className=\"Login-form\" onSubmit={onLogin}>\n//         <h1 className=\"Login-text\">Login</h1>\n//         <div className=\"input-group\">\n//           <label>Email ID</label>\n//           <input\n//             type=\"text\"\n//             name=\"userName\"\n//             autoComplete=\"off\"\n//             placeholder=\"Email ID\"\n//             className={`login-userName ${\n//               error.userName ? \"login-input-error\" : \"\"\n//             }`}\n//             onChange={onLoginChange}\n//             value={login.userName}\n//           />\n//           {error.userName && (\n//             <span className=\"error-text\">Please Enter User ID</span>\n//           )}\n//         </div>\n//         <div className=\"input-group\">\n//           <label>Password</label>\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             autoComplete=\"off\"\n//             placeholder=\"Password\"\n//             className={`login-password ${\n//               error.password ? \"login-input-error\" : \"\"\n//             }`}\n//             onChange={onLoginChange}\n//             value={login.password}\n//           />\n//           {error.password && (\n//             <span className=\"error-text\">Please Enter Password</span>\n//           )}\n//         </div>\n//         <button className=\"Login-btn\" type=\"submit\">\n//           Login\n//         </button>\n//         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\n//           Forgot Password?\n//         </p>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Login;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  console.log(\"1. Component rendered\");\n  const [login, setLogin] = useState({\n    userName: \"\",\n    password: \"\"\n  });\n  useEffect(() => {\n    console.log(\"2. Component mounted or updated\");\n  }, []);\n  const onLoginChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(`3. Input changed: ${name} = ${value}`);\n    setLogin(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const onLogin = event => {\n    event.preventDefault();\n    console.log(\"4. Login attempted\", login);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Login-form\",\n      onSubmit: onLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Login-text\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"userName\",\n          autoComplete: \"off\",\n          placeholder: \"Email ID\",\n          onChange: onLoginChange,\n          value: login.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          autoComplete: \"off\",\n          placeholder: \"Password\",\n          onChange: onLoginChange,\n          value: login.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Login-btn\",\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"J84sPWH+k3Ihc9KIBf97LwEZSTY=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Login","_s","console","log","login","setLogin","userName","password","onLoginChange","event","name","value","target","prev","onLogin","preventDefault","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","autoComplete","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/login-page/Login.js"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../login-page/login.css\";\r\n// // import APIStored from \"../API/APIStored\";\r\n// // import axios from \"axios\";\r\n// // import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\n// // function Login() {\r\n// //   const navigate = useNavigate();\r\n\r\n// //   const [login, setLogin] = useState({\r\n// //     userName: \"\",\r\n// //     password: \"\",\r\n// //   });\r\n\r\n// //   const [error, setError] = useState({\r\n// //     userName: false,\r\n// //     password: false,\r\n// //   });\r\n\r\n// //   const [data, setData] = useState([]);\r\n\r\n// //   useEffect(() => {\r\n// //     APIStored()\r\n// //       .then((response) => {\r\n// //         console.log(response.data);\r\n// //         setData(response.data);\r\n// //       })\r\n// //       .catch((error) => console.error(\"Error fetching data\", error));\r\n// //   }, []);\r\n\r\n// //   async function onLogin(event) {\r\n// //     event.preventDefault();\r\n\r\n// //     const newError = {\r\n// //       userName: !login.userName,\r\n// //       password: !login.password,\r\n// //     };\r\n\r\n// //     setError(newError);\r\n\r\n// //     if (Object.values(newError).some((fieldError) => fieldError)) {\r\n// //       console.log(\"Mandatory details are not filled\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     try {\r\n// //       const response = await axios.post(\r\n// //         \"http://localhost:8080/api/authenticate\",\r\n// //         {\r\n// //           username: login.userName,\r\n// //           password: login.password,\r\n// //         }\r\n// //       );\r\n\r\n// //       console.log(\"Full Response:\", response);\r\n\r\n// //       if (response.status === 200) {\r\n// //         const token = response.data.jwt;\r\n// //         console.log(\"Received Token:\", token);\r\n\r\n// //         // Parse the JWT to extract user ID\r\n// //         const tokenData = await parseJwt(token);\r\n// //         console.log(\"Token Data:\", tokenData);\r\n\r\n// //         // Store JWT token and user ID in localStorage\r\n// //         localStorage.setItem(\"authToken\", token); // Store the full token\r\n// //         const userId = tokenData.id;\r\n// //         // setTimeout(() => {\r\n// //         //   const storedUserId = localStorage.getItem(\"userId\");\r\n// //         //   console.log(\"Stored User ID:\", storedUserId);\r\n// //         // }, 1000); // Store the parsed user ID\r\n\r\n// //         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n// //         localStorage.setItem(\"userId\", userId);\r\n// //         const storedUserId = localStorage.getItem(\"userId\");\r\n// //         console.log(\"Stored User ID:\", storedUserId);\r\n// //         sessionStorage.setItem(\"userId\", userId);\r\n\r\n// //         // const userId = localStorage.getItem(\"userId\");\r\n// //         if (!userId) {\r\n// //           console.error(\"Error: userId is null or undefined\");\r\n// //           return;\r\n// //         }\r\n\r\n// //         const accountResponse = await axios.get(\r\n// //           `http://localhost:8080/api/account/userid/${userId}`\r\n// //         );\r\n// //         const userResponse = await axios.get(\r\n// //           `http://localhost:8080/api/users/${userId}`\r\n// //         );\r\n\r\n// //         navigate(`/dashboard/${userId}`, {\r\n// //           state: {\r\n// //             JWTaccount: accountResponse.data,\r\n// //             SetJWTuser: userResponse.data,\r\n// //           },\r\n// //         });\r\n// //       } else {\r\n// //         setError({\r\n// //           userName: true,\r\n// //           password: true,\r\n// //         });\r\n// //         console.log(\"Invalid username or password\");\r\n// //       }\r\n// //     } catch (error) {\r\n// //       setError({\r\n// //         userName: true,\r\n// //         password: true,\r\n// //       });\r\n// //       console.error(\"Authentication failed\", error);\r\n// //     }\r\n// //   }\r\n\r\n// //   function onForgotPassword() {\r\n// //     navigate(\"/forgot-password\");\r\n// //   }\r\n\r\n// //   function parseJwt(token) {\r\n// //     if (!token) {\r\n// //       console.error(\"Token is undefined or null\");\r\n// //       return {};\r\n// //     }\r\n// //     try {\r\n// //       const base64Url = token.split(\".\")[1];\r\n// //       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n// //       const payload = JSON.parse(window.atob(base64));\r\n// //       return {\r\n// //         id: payload.userId,\r\n// //         email: payload.sub,\r\n// //       };\r\n// //     } catch (error) {\r\n// //       console.error(\"Error parsing JWT token:\", error);\r\n// //       return {};\r\n// //     }\r\n// //   }\r\n\r\n// //   function onLoginChange(event) {\r\n// //     const { name, value } = event.target;\r\n// //     setLogin((prevLoginData) => ({\r\n// //       ...prevLoginData,\r\n// //       [name]: value,\r\n// //     }));\r\n\r\n// //     setError((prevError) => ({\r\n// //       ...prevError,\r\n// //       [name]: !value,\r\n// //     }));\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"Login-page\">\r\n// //       <form className=\"Login-form\" onSubmit={onLogin}>\r\n// //         <h1 className=\"Login-text\">Login</h1>\r\n// //         <div className=\"input-group\">\r\n// //           <label>Email ID</label>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             name=\"userName\"\r\n// //             autoComplete=\"off\"\r\n// //             placeholder=\"Email ID\"\r\n// //             className={`login-userName ${\r\n// //               error.userName ? \"login-input-error\" : \"\"\r\n// //             }`}\r\n// //             onChange={onLoginChange}\r\n// //             value={login.userName}\r\n// //           />\r\n// //           {error.userName && (\r\n// //             <span className=\"error-text\">Please Enter User ID</span>\r\n// //           )}\r\n// //         </div>\r\n// //         <div className=\"input-group\">\r\n// //           <label>Password</label>\r\n// //           <input\r\n// //             type=\"password\"\r\n// //             name=\"password\"\r\n// //             autoComplete=\"off\"\r\n// //             placeholder=\"Password\"\r\n// //             className={`login-password ${\r\n// //               error.password ? \"login-input-error\" : \"\"\r\n// //             }`}\r\n// //             onChange={onLoginChange}\r\n// //             value={login.password}\r\n// //           />\r\n// //           {error.password && (\r\n// //             <span className=\"error-text\">Please Enter Password</span>\r\n// //           )}\r\n// //         </div>\r\n// //         <button className=\"Login-btn\" type=\"submit\">\r\n// //           Login\r\n// //         </button>\r\n// //         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\r\n// //           Forgot Password?\r\n// //         </p>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Login;\r\n// // import React, { useState } from \"react\";\r\n// // import { useNavigate } from \"react-router-dom\";\r\n// // import \"../login-page/login.css\";\r\n// // import axios from \"axios\";\r\n// // // import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\n// // function Login() {\r\n// //   console.log(\"1. Start of onLogin function\");\r\n// //   const navigate = useNavigate();\r\n// //   console.log(\"2. After preventDefault\");\r\n// //   const [login, setLogin] = useState({\r\n// //     userName: \"\",\r\n// //     password: \"\",\r\n// //   });\r\n\r\n// //   const [error, setError] = useState({\r\n// //     userName: false,\r\n// //     password: false,\r\n// //   });\r\n\r\n// //   async function onLogin(event) {\r\n// //     try {\r\n// //       console.log(\"1. Start of onLogin function\");\r\n// //       event.preventDefault();\r\n\r\n// //       const newError = {\r\n// //         userName: !login.userName,\r\n// //         password: !login.password,\r\n// //       };\r\n// //       console.log(\"3. New error state:\", newError);\r\n// //       setError(newError);\r\n\r\n// //       if (Object.values(newError).some((fieldError) => fieldError)) {\r\n// //         console.log(\"Mandatory details are not filled\");\r\n// //         return;\r\n// //       }\r\n\r\n// //       // Check for admin credentials\r\n// //       if (\r\n// //         login.userName === \"admin@easybanking.com\" &&\r\n// //         login.password === \"admin@easy123\"\r\n// //       ) {\r\n// //         handleAdminLogin();\r\n// //         return;\r\n// //       }\r\n\r\n// //       try {\r\n// //         const response = await axios.post(\r\n// //           \"http://localhost:8080/api/authenticate\",\r\n// //           {\r\n// //             username: login.userName,\r\n// //             password: login.password,\r\n// //           }\r\n// //         );\r\n\r\n// //         console.log(\"Full Response:\", response);\r\n\r\n// //         if (response.status === 200) {\r\n// //           const token = response.data.jwt;\r\n// //           console.log(\"Received Token:\", token);\r\n\r\n// //           const tokenData = await parseJwt(token);\r\n// //           console.log(\"Token Data:\", tokenData);\r\n\r\n// //           localStorage.setItem(\"authToken\", token);\r\n// //           const userId = tokenData.id;\r\n// //           console.log(\"User ID:\", userId);\r\n\r\n// //           axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n// //           localStorage.setItem(\"userId\", userId);\r\n// //           sessionStorage.setItem(\"userId\", userId);\r\n// //           console.log(\"Fetching user data...\");\r\n// //           const accountResponse = await axios.get(\r\n// //             `http://localhost:8080/api/account/userid/${userId}`\r\n// //           );\r\n// //           console.log(\"Account Response:\", accountResponse.data);\r\n// //           console.log(\"Fetching user data...\");\r\n// //           const userResponse = await axios.get(\r\n// //             `http://localhost:8080/api/users/${userId}`\r\n// //           );\r\n// //           console.log(\"User Response:\", userResponse.data);\r\n// //           console.log(userResponse.data);\r\n// //           navigate(`/dashboard/${userId}`, {\r\n// //             state: {\r\n// //               JWTaccount: accountResponse.data,\r\n// //               SetJWTuser: userResponse.data,\r\n// //             },\r\n// //           });\r\n// //         } else {\r\n// //           console.log(\"Unexpected response status:\", response.status);\r\n// //           setError({\r\n// //             userName: true,\r\n// //             password: true,\r\n// //           });\r\n// //           console.log(\"Invalid username or password\");\r\n// //         }\r\n// //       } catch (error) {\r\n// //         setError({\r\n// //           userName: true,\r\n// //           password: true,\r\n// //         });\r\n// //         console.error(\"Authentication failed\", error);\r\n// //         console.error(\"Authentication failed\", error);\r\n// //         if (error.response) {\r\n// //           console.error(\"Response data:\", error.response.data);\r\n// //           console.error(\"Response status:\", error.response.status);\r\n// //           console.error(\"Response headers:\", error.response.headers);\r\n// //         } else if (error.request) {\r\n// //           console.error(\"No response received:\", error.request);\r\n// //         } else {\r\n// //           console.error(\"Error setting up request:\", error.message);\r\n// //         }\r\n// //       }\r\n// //     } catch {\r\n// //       console.error(\"Unexpected error in onLogin:\", error);\r\n// //     }\r\n// //   }\r\n// //   console.log(\"5. Before return statement\");\r\n// //   function handleAdminLogin() {\r\n// //     // Generate a simple admin token (in a real app, this should be done server-side)\r\n// //     const adminToken = btoa(\r\n// //       JSON.stringify({ role: \"admin\", email: login.userName })\r\n// //     );\r\n// //     localStorage.setItem(\"adminToken\", adminToken);\r\n// //     navigate(\"/admin\", { state: { adminJWT: adminToken } });\r\n// //   }\r\n\r\n// //   function onForgotPassword() {\r\n// //     navigate(\"/forgot-password\");\r\n// //   }\r\n\r\n// //   function parseJwt(token) {\r\n// //     if (!token) {\r\n// //       console.error(\"Token is undefined or null\");\r\n// //       return {};\r\n// //     }\r\n// //     try {\r\n// //       const base64Url = token.split(\".\")[1];\r\n// //       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n// //       const payload = JSON.parse(window.atob(base64));\r\n// //       console.log(\"Full JWT payload:\", payload);\r\n// //       return {\r\n// //         id: payload.userId,\r\n// //         email: payload.sub,\r\n// //       };\r\n// //     } catch (error) {\r\n// //       console.error(\"Error parsing JWT token:\", error);\r\n// //       return {};\r\n// //     }\r\n// //   }\r\n\r\n// //   function onLoginChange(event) {\r\n// //     console.log(\"21. onLoginChange called\");\r\n// //     const { name, value } = event.target;\r\n// //     setLogin((prevLoginData) => ({\r\n// //       ...prevLoginData,\r\n// //       [name]: value,\r\n// //     }));\r\n\r\n// //     setError((prevError) => ({\r\n// //       ...prevError,\r\n// //       [name]: !value,\r\n// //     }));\r\n// //   }\r\n\r\n// //   return (\r\n// //     <div className=\"Login-page\">\r\n// //       <form className=\"Login-form\" onSubmit={onLogin}>\r\n// //         <h1 className=\"Login-text\">Login</h1>\r\n// //         <div className=\"input-group\">\r\n// //           <label>Email ID</label>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             name=\"userName\"\r\n// //             autoComplete=\"off\"\r\n// //             placeholder=\"Email ID\"\r\n// //             className={`login-userName ${\r\n// //               error.userName ? \"login-input-error\" : \"\"\r\n// //             }`}\r\n// //             onChange={onLoginChange}\r\n// //             value={login.userName}\r\n// //           />\r\n// //           {error.userName && (\r\n// //             <span className=\"error-text\">Please Enter User ID</span>\r\n// //           )}\r\n// //         </div>\r\n// //         <div className=\"input-group\">\r\n// //           <label>Password</label>\r\n// //           <input\r\n// //             type=\"password\"\r\n// //             name=\"password\"\r\n// //             autoComplete=\"off\"\r\n// //             placeholder=\"Password\"\r\n// //             className={`login-password ${\r\n// //               error.password ? \"login-input-error\" : \"\"\r\n// //             }`}\r\n// //             onChange={onLoginChange}\r\n// //             value={login.password}\r\n// //           />\r\n// //           {error.password && (\r\n// //             <span className=\"error-text\">Please Enter Password</span>\r\n// //           )}\r\n// //         </div>\r\n// //         <button className=\"Login-btn\" type=\"submit\">\r\n// //           Login\r\n// //         </button>\r\n// //         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\r\n// //           Forgot Password?\r\n// //         </p>\r\n// //       </form>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Login;\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../login-page/login.css\";\r\n// import axios from \"axios\";\r\n// // import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\n// function Login() {\r\n//   console.log(\"1. Start of onLogin function\");\r\n//   const navigate = useNavigate();\r\n//   console.log(\"2. After preventDefault\");\r\n//   const [login, setLogin] = useState({\r\n//     userName: \"\",\r\n//     password: \"\",\r\n//   });\r\n\r\n//   const [error, setError] = useState({\r\n//     userName: false,\r\n//     password: false,\r\n//   });\r\n\r\n//   function onLogin(event) {\r\n//     try {\r\n//       console.log(\"1. Start of onLogin function\");\r\n//       event.preventDefault();\r\n\r\n//       const newError = {\r\n//         userName: !login.userName,\r\n//         password: !login.password,\r\n//       };\r\n//       console.log(\"3. New error state:\", newError);\r\n//       setError(newError);\r\n\r\n//       if (Object.values(newError).some((fieldError) => fieldError)) {\r\n//         console.log(\"Mandatory details are not filled\");\r\n//         return;\r\n//       }\r\n\r\n//       // Check for admin credentials\r\n//       if (\r\n//         login.userName === \"admin@easybanking.com\" &&\r\n//         login.password === \"admin@easy123\"\r\n//       ) {\r\n//         handleAdminLogin();\r\n//         return;\r\n//       }\r\n\r\n//       axios\r\n//         .post(\"http://localhost:8080/api/authenticate\", {\r\n//           username: login.userName,\r\n//           password: login.password,\r\n//         })\r\n//         .then((response) => {\r\n//           console.log(\"Full Response:\", response);\r\n\r\n//           if (response.status === 200) {\r\n//             const token = response.data.jwt;\r\n//             console.log(\"Received Token:\", token);\r\n\r\n//             parseJwt(token).then((tokenData) => {\r\n//               console.log(\"Token Data:\", tokenData);\r\n\r\n//               localStorage.setItem(\"authToken\", token);\r\n//               const userId = tokenData.id;\r\n//               console.log(\"User ID:\", userId);\r\n\r\n//               axios.defaults.headers.common[\r\n//                 \"Authorization\"\r\n//               ] = `Bearer ${token}`;\r\n//               localStorage.setItem(\"userId\", userId);\r\n//               sessionStorage.setItem(\"userId\", userId);\r\n//               console.log(\"Fetching user data...\");\r\n\r\n//               Promise.all([\r\n//                 axios.get(`http://localhost:8080/api/account/userid/${userId}`),\r\n//                 axios.get(`http://localhost:8080/api/users/${userId}`),\r\n//               ]).then(([accountResponse, userResponse]) => {\r\n//                 console.log(\"Account Response:\", accountResponse.data);\r\n//                 console.log(\"Fetching user data...\");\r\n//                 console.log(\"User Response:\", userResponse.data);\r\n//                 console.log(userResponse.data);\r\n//                 navigate(`/dashboard/${userId}`, {\r\n//                   state: {\r\n//                     JWTaccount: accountResponse.data,\r\n//                     SetJWTuser: userResponse.data,\r\n//                   },\r\n//                 });\r\n//               });\r\n//             });\r\n//           } else {\r\n//             console.log(\"Unexpected response status:\", response.status);\r\n//             setError({\r\n//               userName: true,\r\n//               password: true,\r\n//             });\r\n//             console.log(\"Invalid username or password\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           setError({\r\n//             userName: true,\r\n//             password: true,\r\n//           });\r\n//           console.error(\"Authentication failed\", error);\r\n//           console.error(\"Authentication failed\", error);\r\n//           if (error.response) {\r\n//             console.error(\"Response data:\", error.response.data);\r\n//             console.error(\"Response status:\", error.response.status);\r\n//             console.error(\"Response headers:\", error.response.headers);\r\n//           } else if (error.request) {\r\n//             console.error(\"No response received:\", error.request);\r\n//           } else {\r\n//             console.error(\"Error setting up request:\", error.message);\r\n//           }\r\n//         });\r\n//     } catch (error) {\r\n//       console.error(\"Unexpected error in onLogin:\", error);\r\n//     }\r\n//   }\r\n//   console.log(\"5. Before return statement\");\r\n//   function handleAdminLogin() {\r\n//     // Generate a simple admin token (in a real app, this should be done server-side)\r\n//     const adminToken = btoa(\r\n//       JSON.stringify({ role: \"admin\", email: login.userName })\r\n//     );\r\n//     localStorage.setItem(\"adminToken\", adminToken);\r\n//     navigate(\"/admin\", { state: { adminJWT: adminToken } });\r\n//   }\r\n\r\n//   function onForgotPassword() {\r\n//     navigate(\"/forgot-password\");\r\n//   }\r\n\r\n//   function parseJwt(token) {\r\n//     return new Promise((resolve, reject) => {\r\n//       if (!token) {\r\n//         console.error(\"Token is undefined or null\");\r\n//         reject({});\r\n//       }\r\n//       try {\r\n//         const base64Url = token.split(\".\")[1];\r\n//         const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n//         const payload = JSON.parse(window.atob(base64));\r\n//         console.log(\"Full JWT payload:\", payload);\r\n//         resolve({\r\n//           id: payload.userId,\r\n//           email: payload.sub,\r\n//         });\r\n//       } catch (error) {\r\n//         console.error(\"Error parsing JWT token:\", error);\r\n//         reject({});\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   function onLoginChange(event) {\r\n//     console.log(\"21. onLoginChange called\");\r\n//     const { name, value } = event.target;\r\n//     setLogin((prevLoginData) => ({\r\n//       ...prevLoginData,\r\n//       [name]: value,\r\n//     }));\r\n\r\n//     setError((prevError) => ({\r\n//       ...prevError,\r\n//       [name]: !value,\r\n//     }));\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"Login-page\">\r\n//       <form className=\"Login-form\" onSubmit={onLogin}>\r\n//         <h1 className=\"Login-text\">Login</h1>\r\n//         <div className=\"input-group\">\r\n//           <label>Email ID</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"userName\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Email ID\"\r\n//             className={`login-userName ${\r\n//               error.userName ? \"login-input-error\" : \"\"\r\n//             }`}\r\n//             onChange={onLoginChange}\r\n//             value={login.userName}\r\n//           />\r\n//           {error.userName && (\r\n//             <span className=\"error-text\">Please Enter User ID</span>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"input-group\">\r\n//           <label>Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             name=\"password\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Password\"\r\n//             className={`login-password ${\r\n//               error.password ? \"login-input-error\" : \"\"\r\n//             }`}\r\n//             onChange={onLoginChange}\r\n//             value={login.password}\r\n//           />\r\n//           {error.password && (\r\n//             <span className=\"error-text\">Please Enter Password</span>\r\n//           )}\r\n//         </div>\r\n//         <button className=\"Login-btn\" type=\"submit\">\r\n//           Login\r\n//         </button>\r\n//         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\r\n//           Forgot Password?\r\n//         </p>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Login;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Login() {\r\n  console.log(\"1. Component rendered\");\r\n\r\n  const [login, setLogin] = useState({\r\n    userName: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"2. Component mounted or updated\");\r\n  }, []);\r\n\r\n  const onLoginChange = (event) => {\r\n    const { name, value } = event.target;\r\n    console.log(`3. Input changed: ${name} = ${value}`);\r\n    setLogin((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const onLogin = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"4. Login attempted\", login);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login-page\">\r\n      <form className=\"Login-form\" onSubmit={onLogin}>\r\n        <h1 className=\"Login-text\">Login</h1>\r\n        <div className=\"input-group\">\r\n          <label>Email ID</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Email ID\"\r\n            onChange={onLoginChange}\r\n            value={login.userName}\r\n          />\r\n        </div>\r\n        <div className=\"input-group\">\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Password\"\r\n            onChange={onLoginChange}\r\n            value={login.password}\r\n          />\r\n        </div>\r\n        <button className=\"Login-btn\" type=\"submit\">\r\n          Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACfC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EAEpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IACjCU,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACdK,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCV,OAAO,CAACC,GAAG,CAAC,qBAAqBO,IAAI,MAAMC,KAAK,EAAE,CAAC;IACnDN,QAAQ,CAAEQ,IAAI,KAAM;MAClB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,OAAO,GAAIL,KAAK,IAAK;IACzBA,KAAK,CAACM,cAAc,CAAC,CAAC;IACtBb,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,KAAK,CAAC;EAC1C,CAAC;EAED,oBACEL,OAAA;IAAKiB,SAAS,EAAC,YAAY;IAAAC,QAAA,eACzBlB,OAAA;MAAMiB,SAAS,EAAC,YAAY;MAACE,QAAQ,EAAEJ,OAAQ;MAAAG,QAAA,gBAC7ClB,OAAA;QAAIiB,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCvB,OAAA;QAAKiB,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlB,OAAA;UAAAkB,QAAA,EAAO;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvBvB,OAAA;UACEwB,IAAI,EAAC,MAAM;UACXb,IAAI,EAAC,UAAU;UACfc,YAAY,EAAC,KAAK;UAClBC,WAAW,EAAC,UAAU;UACtBC,QAAQ,EAAElB,aAAc;UACxBG,KAAK,EAAEP,KAAK,CAACE;QAAS;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNvB,OAAA;QAAKiB,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlB,OAAA;UAAAkB,QAAA,EAAO;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvBvB,OAAA;UACEwB,IAAI,EAAC,UAAU;UACfb,IAAI,EAAC,UAAU;UACfc,YAAY,EAAC,KAAK;UAClBC,WAAW,EAAC,UAAU;UACtBC,QAAQ,EAAElB,aAAc;UACxBG,KAAK,EAAEP,KAAK,CAACG;QAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNvB,OAAA;QAAQiB,SAAS,EAAC,WAAW;QAACO,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAE5C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACrB,EAAA,CA1DQD,KAAK;AAAA2B,EAAA,GAAL3B,KAAK;AA4Dd,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
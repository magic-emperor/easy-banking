{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\Dashboard\\\\Deposit.js\",\n  _s = $RefreshSig$();\n// import ReactDOM from \"react-dom\";\n// import \"./deposit.css\";\n// import React, { useContext, useState } from \"react\";\n// import { useEffect } from \"react\";\n// import axios from \"axios\";\n// import { AccountContext } from \"../Context/AccountProvider\";\n\n// function Deposit({ setDeposit }) {\n//   const portalRoot = document.getElementById(\"portalRoot\");\n//   const { account, setAccount } = useContext(AccountContext);\n//   const [inputAmount, setInputAmount] = useState(\"\");\n//   const [transaction, setTransaction] = useState({\n//     TransactionID: null,\n//     userId: localStorage.getItem(\"userId\"),\n//     transferDate: \"\",\n//     transferDetails: \"\",\n//     amountTransfered: 0,\n//     balance: account ? account.accBalance : 0,\n//   });\n\n//   useEffect(() => {\n//     const userId = localStorage.getItem(\"userId\");\n//     if (userId) {\n//       axios\n//         .get(`http://localhost:8080/api/account/userid/${userId}`)\n//         .then((response) => {\n//           setAccount(response.data);\n//           // Update balance in transaction state with account balance\n//           setTransaction((prev) => ({\n//             ...prev,\n//             balance: response.data.accBalance,\n//           }));\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching account data:\", error);\n//         });\n//     }\n//   }, [setAccount]);\n\n//   if (!portalRoot) {\n//     console.error(\"Portal root not found\");\n//     return null;\n//   }\n\n//   // Handle input change for deposit amount\n//   function handleInputChange(e) {\n//     setInputAmount(e.target.value);\n//   }\n\n//   // Handle deposit form submission\n//   function handleDeposit(e) {\n//     e.preventDefault();\n//     const userId = localStorage.getItem(\"userId\");\n\n//     // Capture the current date\n//     const currentDate = new Date().toISOString().split(\"T\")[0];\n\n//     // Prepare updated account object with the new balance\n//     const updatedAccount = {\n//       ...account,\n//       accBalance: account.accBalance + Number(inputAmount),\n//     };\n\n//     console.log(\"Updated account data before PUT:\", updatedAccount); // Debug log\n\n//     // Send PUT request to update account balance in the DB\n//     axios\n//       .put(`http://localhost:8080/api/account/user/${userId}`, updatedAccount, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//       })\n//       .then((response) => {\n//         console.log(\"Response from PUT request:\", response.data); // Debug log\n//         setAccount(response.data); // Update account in context with the response\n//         setDeposit(false); // Close the deposit modal\n//       })\n//       .catch((error) => {\n//         console.log(\"Error updating account balance:\", error);\n//       });\n\n//     // Prepare transaction data with details of the deposit\n//     const updatedTransaction = {\n//       TransactionID: null, // Let backend generate the ID\n//       userId: userId,\n//       transferDate: currentDate,\n//       transferDetails: `Credited to account ${account.accNumber}`,\n//       amountTransfered: Number(inputAmount),\n//       balance: updatedAccount.accBalance,\n//     };\n\n//     // Post request to create a new transaction record\n//     axios\n//       .post(\"http://localhost:8080/api/transaction\", updatedTransaction, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//       })\n//       .then((res) => {\n//         console.log(\"Transaction successfully recorded:\", res.data);\n//       })\n//       .catch((error) => console.log(\"Error recording transaction:\", error));\n//   }\n\n//   return ReactDOM.createPortal(\n//     <div className=\"deposit-overlay\" onClick={() => setDeposit(false)}>\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\n//         <div className=\"deposit-inner\">\n//           <h1>Deposit</h1>\n//           <form onSubmit={handleDeposit}>\n//             <label className=\"amount-details\">Amount:</label>\n//             <input\n//               type=\"number\"\n//               className=\"amount\"\n//               name=\"accBalance\"\n//               value={inputAmount}\n//               placeholder=\"Enter Amount Here\"\n//               autoComplete=\"off\"\n//               required\n//               onChange={handleInputChange}\n//             />\n//             <nav>\n//               <button type=\"submit\" className=\"deposit-btn\">\n//                 Deposit\n//               </button>\n//             </nav>\n//           </form>\n//           <button className=\"close-button\" onClick={() => setDeposit(false)}>\n//             Close\n//           </button>\n//         </div>\n//       </div>\n//     </div>,\n//     portalRoot\n//   );\n// }\n\n// export default Deposit;\nimport ReactDOM from \"react-dom\";\nimport \"./deposit.css\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { AccountContext } from \"../Context/AccountProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Deposit({\n  setDeposit\n}) {\n  _s();\n  const portalRoot = document.getElementById(\"portalRoot\");\n  const {\n    account,\n    setAccount\n  } = useContext(AccountContext);\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [transaction, setTransaction] = useState({\n    TransactionID: null,\n    userId: localStorage.getItem(\"userId\"),\n    transferDate: \"\",\n    transferDetails: \"\",\n    amountTransfered: 0,\n    balance: account ? account.accBalance : 0\n  });\n  useEffect(() => {\n    const userId = localStorage.getItem(\"userId\");\n    const token = localStorage.getItem(\"authToken\");\n    if (userId && token) {\n      axios.get(`http://localhost:8080/api/account/userid/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setAccount(response.data);\n        setTransaction(prev => ({\n          ...prev,\n          balance: response.data.accBalance\n        }));\n      }).catch(error => {\n        console.error(\"Error fetching account data:\", error);\n      });\n    }\n  }, [setAccount]);\n  if (!portalRoot) {\n    console.error(\"Portal root not found\");\n    return null;\n  }\n  function handleInputChange(e) {\n    setInputAmount(e.target.value);\n  }\n  function handleDeposit(e) {\n    e.preventDefault();\n    const userId = localStorage.getItem(\"userId\");\n    const token = localStorage.getItem(\"authToken\");\n\n    // Check if userId is null or undefined\n    if (!userId) {\n      console.error(\"Error: userId is null or undefined\");\n      return; // Prevent further execution if userId is missing\n    }\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    const updatedAccount = {\n      ...account,\n      accBalance: account.accBalance + Number(inputAmount)\n    };\n    console.log(\"Updated account data before PUT:\", updatedAccount);\n\n    // Make sure token is available before making API requests\n    if (token) {\n      axios.put(`http://localhost:8080/api/account/user/${userId}`, updatedAccount, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        }\n      }).then(response => {\n        console.log(\"Response from PUT request:\", response.data);\n        setAccount(response.data);\n        setDeposit(false); // Close the deposit popup on success\n      }).catch(error => {\n        console.log(\"Error updating account balance:\", error);\n      });\n      const updatedTransaction = {\n        TransactionID: null,\n        userId: userId,\n        transferDate: currentDate,\n        transferDetails: `Credited to account ${account.accNumber}`,\n        amountTransfered: Number(inputAmount),\n        balance: updatedAccount.accBalance\n      };\n\n      // POST request to create a transaction\n      axios.post(\"http://localhost:8080/api/transaction\", updatedTransaction, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        }\n      }).then(res => {\n        console.log(\"Transaction successfully recorded:\", res.data);\n      }).catch(error => console.log(\"Error recording transaction:\", error));\n    } else {\n      console.error(\"Error: Token is missing.\");\n    }\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deposit-overlay\",\n    onClick: () => setDeposit(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deposit-modal\",\n      onClick: e => e.stopPropagation(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deposit-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleDeposit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"amount-details\",\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"amount\",\n            name: \"accBalance\",\n            value: inputAmount,\n            placeholder: \"Enter Amount Here\",\n            autoComplete: \"off\",\n            required: true,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"deposit-btn\",\n              children: \"Deposit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => setDeposit(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this), portalRoot);\n}\n_s(Deposit, \"K/z0utxNUDX8FJaZp2BcHay6cdg=\");\n_c = Deposit;\nexport default Deposit;\nvar _c;\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"names":["ReactDOM","React","useContext","useState","useEffect","axios","AccountContext","jsxDEV","_jsxDEV","Deposit","setDeposit","_s","portalRoot","document","getElementById","account","setAccount","inputAmount","setInputAmount","transaction","setTransaction","TransactionID","userId","localStorage","getItem","transferDate","transferDetails","amountTransfered","balance","accBalance","token","get","headers","Authorization","then","response","data","prev","catch","error","console","handleInputChange","e","target","value","handleDeposit","preventDefault","currentDate","Date","toISOString","split","updatedAccount","Number","log","put","updatedTransaction","accNumber","post","res","createPortal","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","placeholder","autoComplete","required","onChange","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/Dashboard/Deposit.js"],"sourcesContent":["// import ReactDOM from \"react-dom\";\r\n// import \"./deposit.css\";\r\n// import React, { useContext, useState } from \"react\";\r\n// import { useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { AccountContext } from \"../Context/AccountProvider\";\r\n\r\n// function Deposit({ setDeposit }) {\r\n//   const portalRoot = document.getElementById(\"portalRoot\");\r\n//   const { account, setAccount } = useContext(AccountContext);\r\n//   const [inputAmount, setInputAmount] = useState(\"\");\r\n//   const [transaction, setTransaction] = useState({\r\n//     TransactionID: null,\r\n//     userId: localStorage.getItem(\"userId\"),\r\n//     transferDate: \"\",\r\n//     transferDetails: \"\",\r\n//     amountTransfered: 0,\r\n//     balance: account ? account.accBalance : 0,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const userId = localStorage.getItem(\"userId\");\r\n//     if (userId) {\r\n//       axios\r\n//         .get(`http://localhost:8080/api/account/userid/${userId}`)\r\n//         .then((response) => {\r\n//           setAccount(response.data);\r\n//           // Update balance in transaction state with account balance\r\n//           setTransaction((prev) => ({\r\n//             ...prev,\r\n//             balance: response.data.accBalance,\r\n//           }));\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching account data:\", error);\r\n//         });\r\n//     }\r\n//   }, [setAccount]);\r\n\r\n//   if (!portalRoot) {\r\n//     console.error(\"Portal root not found\");\r\n//     return null;\r\n//   }\r\n\r\n//   // Handle input change for deposit amount\r\n//   function handleInputChange(e) {\r\n//     setInputAmount(e.target.value);\r\n//   }\r\n\r\n//   // Handle deposit form submission\r\n//   function handleDeposit(e) {\r\n//     e.preventDefault();\r\n//     const userId = localStorage.getItem(\"userId\");\r\n\r\n//     // Capture the current date\r\n//     const currentDate = new Date().toISOString().split(\"T\")[0];\r\n\r\n//     // Prepare updated account object with the new balance\r\n//     const updatedAccount = {\r\n//       ...account,\r\n//       accBalance: account.accBalance + Number(inputAmount),\r\n//     };\r\n\r\n//     console.log(\"Updated account data before PUT:\", updatedAccount); // Debug log\r\n\r\n//     // Send PUT request to update account balance in the DB\r\n//     axios\r\n//       .put(`http://localhost:8080/api/account/user/${userId}`, updatedAccount, {\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//       })\r\n//       .then((response) => {\r\n//         console.log(\"Response from PUT request:\", response.data); // Debug log\r\n//         setAccount(response.data); // Update account in context with the response\r\n//         setDeposit(false); // Close the deposit modal\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(\"Error updating account balance:\", error);\r\n//       });\r\n\r\n//     // Prepare transaction data with details of the deposit\r\n//     const updatedTransaction = {\r\n//       TransactionID: null, // Let backend generate the ID\r\n//       userId: userId,\r\n//       transferDate: currentDate,\r\n//       transferDetails: `Credited to account ${account.accNumber}`,\r\n//       amountTransfered: Number(inputAmount),\r\n//       balance: updatedAccount.accBalance,\r\n//     };\r\n\r\n//     // Post request to create a new transaction record\r\n//     axios\r\n//       .post(\"http://localhost:8080/api/transaction\", updatedTransaction, {\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//       })\r\n//       .then((res) => {\r\n//         console.log(\"Transaction successfully recorded:\", res.data);\r\n//       })\r\n//       .catch((error) => console.log(\"Error recording transaction:\", error));\r\n//   }\r\n\r\n//   return ReactDOM.createPortal(\r\n//     <div className=\"deposit-overlay\" onClick={() => setDeposit(false)}>\r\n//       <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n//         <div className=\"deposit-inner\">\r\n//           <h1>Deposit</h1>\r\n//           <form onSubmit={handleDeposit}>\r\n//             <label className=\"amount-details\">Amount:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"amount\"\r\n//               name=\"accBalance\"\r\n//               value={inputAmount}\r\n//               placeholder=\"Enter Amount Here\"\r\n//               autoComplete=\"off\"\r\n//               required\r\n//               onChange={handleInputChange}\r\n//             />\r\n//             <nav>\r\n//               <button type=\"submit\" className=\"deposit-btn\">\r\n//                 Deposit\r\n//               </button>\r\n//             </nav>\r\n//           </form>\r\n//           <button className=\"close-button\" onClick={() => setDeposit(false)}>\r\n//             Close\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>,\r\n//     portalRoot\r\n//   );\r\n// }\r\n\r\n// export default Deposit;\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./deposit.css\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AccountContext } from \"../Context/AccountProvider\";\r\n\r\nfunction Deposit({ setDeposit }) {\r\n  const portalRoot = document.getElementById(\"portalRoot\");\r\n  const { account, setAccount } = useContext(AccountContext);\r\n  const [inputAmount, setInputAmount] = useState(\"\");\r\n  const [transaction, setTransaction] = useState({\r\n    TransactionID: null,\r\n    userId: localStorage.getItem(\"userId\"),\r\n    transferDate: \"\",\r\n    transferDetails: \"\",\r\n    amountTransfered: 0,\r\n    balance: account ? account.accBalance : 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (userId && token) {\r\n      axios\r\n        .get(`http://localhost:8080/api/account/userid/${userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setAccount(response.data);\r\n          setTransaction((prev) => ({\r\n            ...prev,\r\n            balance: response.data.accBalance,\r\n          }));\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching account data:\", error);\r\n        });\r\n    }\r\n  }, [setAccount]);\r\n\r\n  if (!portalRoot) {\r\n    console.error(\"Portal root not found\");\r\n    return null;\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    setInputAmount(e.target.value);\r\n  }\r\n\r\n  function handleDeposit(e) {\r\n    e.preventDefault();\r\n\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    // Check if userId is null or undefined\r\n    if (!userId) {\r\n      console.error(\"Error: userId is null or undefined\");\r\n      return; // Prevent further execution if userId is missing\r\n    }\r\n\r\n    const currentDate = new Date().toISOString().split(\"T\")[0];\r\n\r\n    const updatedAccount = {\r\n      ...account,\r\n      accBalance: account.accBalance + Number(inputAmount),\r\n    };\r\n\r\n    console.log(\"Updated account data before PUT:\", updatedAccount);\r\n\r\n    // Make sure token is available before making API requests\r\n    if (token) {\r\n      axios\r\n        .put(\r\n          `http://localhost:8080/api/account/user/${userId}`,\r\n          updatedAccount,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"Authorization\": `Bearer ${token}`,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(\"Response from PUT request:\", response.data);\r\n          setAccount(response.data);\r\n          setDeposit(false); // Close the deposit popup on success\r\n        })\r\n        .catch((error) => {\r\n          console.log(\"Error updating account balance:\", error);\r\n        });\r\n\r\n      const updatedTransaction = {\r\n        TransactionID: null,\r\n        userId: userId,\r\n        transferDate: currentDate,\r\n        transferDetails: `Credited to account ${account.accNumber}`,\r\n        amountTransfered: Number(inputAmount),\r\n        balance: updatedAccount.accBalance,\r\n      };\r\n\r\n      // POST request to create a transaction\r\n      axios\r\n        .post(\"http://localhost:8080/api/transaction\", updatedTransaction, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": `Bearer ${token}`,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          console.log(\"Transaction successfully recorded:\", res.data);\r\n        })\r\n        .catch((error) => console.log(\"Error recording transaction:\", error));\r\n    } else {\r\n      console.error(\"Error: Token is missing.\");\r\n    }\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"deposit-overlay\" onClick={() => setDeposit(false)}>\r\n      <div className=\"deposit-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"deposit-inner\">\r\n          <h1>Deposit</h1>\r\n          <form onSubmit={handleDeposit}>\r\n            <label className=\"amount-details\">Amount:</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"amount\"\r\n              name=\"accBalance\"\r\n              value={inputAmount}\r\n              placeholder=\"Enter Amount Here\"\r\n              autoComplete=\"off\"\r\n              required\r\n              onChange={handleInputChange}\r\n            />\r\n            <nav>\r\n              <button type=\"submit\" className=\"deposit-btn\">\r\n                Deposit\r\n              </button>\r\n            </nav>\r\n          </form>\r\n          <button className=\"close-button\" onClick={() => setDeposit(false)}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    portalRoot\r\n  );\r\n}\r\n\r\nexport default Deposit;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAO,eAAe;AACtB,OAAOC,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,OAAOA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC/B,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EACxD,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGd,UAAU,CAACI,cAAc,CAAC;EAC1D,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC;IAC7CkB,aAAa,EAAE,IAAI;IACnBC,MAAM,EAAEC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACtCC,YAAY,EAAE,EAAE;IAChBC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
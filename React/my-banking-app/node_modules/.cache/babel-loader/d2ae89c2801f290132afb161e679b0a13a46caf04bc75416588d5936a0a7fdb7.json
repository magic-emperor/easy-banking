{"ast":null,"code":"var _jsxFileName = \"C:\\\\Shared folder\\\\Banking Web Application\\\\React\\\\my-banking-app\\\\src\\\\components\\\\login-page\\\\Login.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../login-page/login.css\";\n// import APIStored from \"../API/APIStored\";\n// import axios from \"axios\";\n// import image from \"../../image/login-backgroundImage.jpg\";\n\n// function Login() {\n//   const navigate = useNavigate();\n\n//   const [login, setLogin] = useState({\n//     userName: \"\",\n//     password: \"\",\n//   });\n\n//   const [error, setError] = useState({\n//     userName: false,\n//     password: false,\n//   });\n\n//   const [data, setData] = useState([]);\n\n//   useEffect(() => {\n//     APIStored()\n//       .then((response) => {\n//         console.log(response.data);\n//         setData(response.data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data\", error));\n//   }, []);\n\n//   async function onLogin(event) {\n//     event.preventDefault();\n\n//     const newError = {\n//       userName: !login.userName,\n//       password: !login.password,\n//     };\n\n//     setError(newError);\n\n//     if (Object.values(newError).some((fieldError) => fieldError)) {\n//       console.log(\"Mandatory details are not filled\");\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8080/api/authenticate\",\n//         {\n//           username: login.userName,\n//           password: login.password,\n//         }\n//       );\n\n//       console.log(\"Full Response:\", response);\n\n//       if (response.status === 200) {\n//         const token = response.data.jwt;\n//         console.log(\"Received Token:\", token);\n\n//         // Parse the JWT to extract user ID\n//         const tokenData = await parseJwt(token);\n//         console.log(\"Token Data:\", tokenData);\n\n//         // Store JWT token and user ID in localStorage\n//         localStorage.setItem(\"authToken\", token); // Store the full token\n//         const userId = tokenData.id;\n//         // setTimeout(() => {\n//         //   const storedUserId = localStorage.getItem(\"userId\");\n//         //   console.log(\"Stored User ID:\", storedUserId);\n//         // }, 1000); // Store the parsed user ID\n\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n//         localStorage.setItem(\"userId\", userId);\n//         const storedUserId = localStorage.getItem(\"userId\");\n//         console.log(\"Stored User ID:\", storedUserId);\n//         sessionStorage.setItem(\"userId\", userId);\n\n//         // const userId = localStorage.getItem(\"userId\");\n//         if (!userId) {\n//           console.error(\"Error: userId is null or undefined\");\n//           return;\n//         }\n\n//         const accountResponse = await axios.get(\n//           `http://localhost:8080/api/account/userid/${userId}`\n//         );\n//         const userResponse = await axios.get(\n//           `http://localhost:8080/api/users/${userId}`\n//         );\n\n//         navigate(`/dashboard/${userId}`, {\n//           state: {\n//             JWTaccount: accountResponse.data,\n//             SetJWTuser: userResponse.data,\n//           },\n//         });\n//       } else {\n//         setError({\n//           userName: true,\n//           password: true,\n//         });\n//         console.log(\"Invalid username or password\");\n//       }\n//     } catch (error) {\n//       setError({\n//         userName: true,\n//         password: true,\n//       });\n//       console.error(\"Authentication failed\", error);\n//     }\n//   }\n\n//   function onForgotPassword() {\n//     navigate(\"/forgot-password\");\n//   }\n\n//   function parseJwt(token) {\n//     if (!token) {\n//       console.error(\"Token is undefined or null\");\n//       return {};\n//     }\n//     try {\n//       const base64Url = token.split(\".\")[1];\n//       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n//       const payload = JSON.parse(window.atob(base64));\n//       return {\n//         id: payload.userId,\n//         email: payload.sub,\n//       };\n//     } catch (error) {\n//       console.error(\"Error parsing JWT token:\", error);\n//       return {};\n//     }\n//   }\n\n//   function onLoginChange(event) {\n//     const { name, value } = event.target;\n//     setLogin((prevLoginData) => ({\n//       ...prevLoginData,\n//       [name]: value,\n//     }));\n\n//     setError((prevError) => ({\n//       ...prevError,\n//       [name]: !value,\n//     }));\n//   }\n\n//   return (\n//     <div className=\"Login-page\">\n//       <form className=\"Login-form\" onSubmit={onLogin}>\n//         <h1 className=\"Login-text\">Login</h1>\n//         <div className=\"input-group\">\n//           <label>Email ID</label>\n//           <input\n//             type=\"text\"\n//             name=\"userName\"\n//             autoComplete=\"off\"\n//             placeholder=\"Email ID\"\n//             className={`login-userName ${\n//               error.userName ? \"login-input-error\" : \"\"\n//             }`}\n//             onChange={onLoginChange}\n//             value={login.userName}\n//           />\n//           {error.userName && (\n//             <span className=\"error-text\">Please Enter User ID</span>\n//           )}\n//         </div>\n//         <div className=\"input-group\">\n//           <label>Password</label>\n//           <input\n//             type=\"password\"\n//             name=\"password\"\n//             autoComplete=\"off\"\n//             placeholder=\"Password\"\n//             className={`login-password ${\n//               error.password ? \"login-input-error\" : \"\"\n//             }`}\n//             onChange={onLoginChange}\n//             value={login.password}\n//           />\n//           {error.password && (\n//             <span className=\"error-text\">Please Enter Password</span>\n//           )}\n//         </div>\n//         <button className=\"Login-btn\" type=\"submit\">\n//           Login\n//         </button>\n//         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\n//           Forgot Password?\n//         </p>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Login;\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../login-page/login.css\";\nimport axios from \"axios\";\n// import image from \"../../image/login-backgroundImage.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  console.log(\"1. Start of onLogin function\");\n  const navigate = useNavigate();\n  console.log(\"2. After preventDefault\");\n  const [login, setLogin] = useState({\n    userName: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState({\n    userName: false,\n    password: false\n  });\n  async function onLogin(event) {\n    event.preventDefault();\n    const newError = {\n      userName: !login.userName,\n      password: !login.password\n    };\n    console.log(\"3. New error state:\", newError);\n    setError(newError);\n    if (Object.values(newError).some(fieldError => fieldError)) {\n      console.log(\"Mandatory details are not filled\");\n      return;\n    }\n\n    // Check for admin credentials\n    if (login.userName === \"admin@easybanking.com\" && login.password === \"admin@easy123\") {\n      handleAdminLogin();\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:8080/api/authenticate\", {\n        username: login.userName,\n        password: login.password\n      });\n      console.log(\"Full Response:\", response);\n      if (response.status === 200) {\n        const token = response.data.jwt;\n        console.log(\"Received Token:\", token);\n        const tokenData = await parseJwt(token);\n        console.log(\"Token Data:\", tokenData);\n        localStorage.setItem(\"authToken\", token);\n        const userId = tokenData.id;\n        console.log(\"User ID:\", userId);\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n        localStorage.setItem(\"userId\", userId);\n        sessionStorage.setItem(\"userId\", userId);\n        console.log(\"Fetching user data...\");\n        const accountResponse = await axios.get(`http://localhost:8080/api/account/userid/${userId}`);\n        console.log(\"Account Response:\", accountResponse.data);\n        console.log(\"Fetching user data...\");\n        const userResponse = await axios.get(`http://localhost:8080/api/users/${userId}`);\n        console.log(\"User Response:\", userResponse.data);\n        console.log(userResponse.data);\n        navigate(`/dashboard/${userId}`, {\n          state: {\n            JWTaccount: accountResponse.data,\n            SetJWTuser: userResponse.data\n          }\n        });\n      } else {\n        console.log(\"Unexpected response status:\", response.status);\n        setError({\n          userName: true,\n          password: true\n        });\n        console.log(\"Invalid username or password\");\n      }\n    } catch (error) {\n      setError({\n        userName: true,\n        password: true\n      });\n      console.error(\"Authentication failed\", error);\n      console.error(\"Authentication failed\", error);\n      if (error.response) {\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n        console.error(\"Response headers:\", error.response.headers);\n      } else if (error.request) {\n        console.error(\"No response received:\", error.request);\n      } else {\n        console.error(\"Error setting up request:\", error.message);\n      }\n    }\n  }\n  function handleAdminLogin() {\n    const adminToken = ({\n      role: \"admin\",\n      email: login.userName\n    }, \"X9zIwQhYVFMm9jLWWtR88rnbY1wIfXqg2O1MN+v0sfY=\", {\n      expiresIn: \"1h\"\n    });\n    localStorage.setItem(\"adminToken\", adminToken);\n    navigate(\"/admin\", {\n      state: {\n        adminJWT: adminToken\n      }\n    });\n  }\n  function onForgotPassword() {\n    navigate(\"/forgot-password\");\n  }\n  function parseJwt(token) {\n    if (!token) {\n      console.error(\"Token is undefined or null\");\n      return {};\n    }\n    try {\n      const base64Url = token.split(\".\")[1];\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n      const payload = JSON.parse(window.atob(base64));\n      console.log(\"Full JWT payload:\", payload);\n      return {\n        id: payload.userId,\n        email: payload.sub\n      };\n    } catch (error) {\n      console.error(\"Error parsing JWT token:\", error);\n      return {};\n    }\n  }\n  function onLoginChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setLogin(prevLoginData => ({\n      ...prevLoginData,\n      [name]: value\n    }));\n    setError(prevError => ({\n      ...prevError,\n      [name]: !value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"Login-form\",\n      onSubmit: onLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Login-text\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"userName\",\n          autoComplete: \"off\",\n          placeholder: \"Email ID\",\n          className: `login-userName ${error.userName ? \"login-input-error\" : \"\"}`,\n          onChange: onLoginChange,\n          value: login.userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), error.userName && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-text\",\n          children: \"Please Enter User ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          autoComplete: \"off\",\n          placeholder: \"Password\",\n          className: `login-password ${error.password ? \"login-input-error\" : \"\"}`,\n          onChange: onLoginChange,\n          value: login.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), error.password && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error-text\",\n          children: \"Please Enter Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Login-btn\",\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Forgot-password-link\",\n        onClick: onForgotPassword,\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"jF9CVPa7XW0lDDSKHSLMpvpAEhM=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","Login","_s","console","log","navigate","login","setLogin","userName","password","error","setError","onLogin","event","preventDefault","newError","Object","values","some","fieldError","handleAdminLogin","response","post","username","status","token","data","jwt","tokenData","parseJwt","localStorage","setItem","userId","id","defaults","headers","common","sessionStorage","accountResponse","get","userResponse","state","JWTaccount","SetJWTuser","request","message","adminToken","role","email","expiresIn","adminJWT","onForgotPassword","base64Url","split","base64","replace","payload","JSON","parse","window","atob","sub","onLoginChange","name","value","target","prevLoginData","prevError","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","autoComplete","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Shared folder/Banking Web Application/React/my-banking-app/src/components/login-page/Login.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"../login-page/login.css\";\r\n// import APIStored from \"../API/APIStored\";\r\n// import axios from \"axios\";\r\n// import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\n// function Login() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const [login, setLogin] = useState({\r\n//     userName: \"\",\r\n//     password: \"\",\r\n//   });\r\n\r\n//   const [error, setError] = useState({\r\n//     userName: false,\r\n//     password: false,\r\n//   });\r\n\r\n//   const [data, setData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     APIStored()\r\n//       .then((response) => {\r\n//         console.log(response.data);\r\n//         setData(response.data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data\", error));\r\n//   }, []);\r\n\r\n//   async function onLogin(event) {\r\n//     event.preventDefault();\r\n\r\n//     const newError = {\r\n//       userName: !login.userName,\r\n//       password: !login.password,\r\n//     };\r\n\r\n//     setError(newError);\r\n\r\n//     if (Object.values(newError).some((fieldError) => fieldError)) {\r\n//       console.log(\"Mandatory details are not filled\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8080/api/authenticate\",\r\n//         {\r\n//           username: login.userName,\r\n//           password: login.password,\r\n//         }\r\n//       );\r\n\r\n//       console.log(\"Full Response:\", response);\r\n\r\n//       if (response.status === 200) {\r\n//         const token = response.data.jwt;\r\n//         console.log(\"Received Token:\", token);\r\n\r\n//         // Parse the JWT to extract user ID\r\n//         const tokenData = await parseJwt(token);\r\n//         console.log(\"Token Data:\", tokenData);\r\n\r\n//         // Store JWT token and user ID in localStorage\r\n//         localStorage.setItem(\"authToken\", token); // Store the full token\r\n//         const userId = tokenData.id;\r\n//         // setTimeout(() => {\r\n//         //   const storedUserId = localStorage.getItem(\"userId\");\r\n//         //   console.log(\"Stored User ID:\", storedUserId);\r\n//         // }, 1000); // Store the parsed user ID\r\n\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//         localStorage.setItem(\"userId\", userId);\r\n//         const storedUserId = localStorage.getItem(\"userId\");\r\n//         console.log(\"Stored User ID:\", storedUserId);\r\n//         sessionStorage.setItem(\"userId\", userId);\r\n\r\n//         // const userId = localStorage.getItem(\"userId\");\r\n//         if (!userId) {\r\n//           console.error(\"Error: userId is null or undefined\");\r\n//           return;\r\n//         }\r\n\r\n//         const accountResponse = await axios.get(\r\n//           `http://localhost:8080/api/account/userid/${userId}`\r\n//         );\r\n//         const userResponse = await axios.get(\r\n//           `http://localhost:8080/api/users/${userId}`\r\n//         );\r\n\r\n//         navigate(`/dashboard/${userId}`, {\r\n//           state: {\r\n//             JWTaccount: accountResponse.data,\r\n//             SetJWTuser: userResponse.data,\r\n//           },\r\n//         });\r\n//       } else {\r\n//         setError({\r\n//           userName: true,\r\n//           password: true,\r\n//         });\r\n//         console.log(\"Invalid username or password\");\r\n//       }\r\n//     } catch (error) {\r\n//       setError({\r\n//         userName: true,\r\n//         password: true,\r\n//       });\r\n//       console.error(\"Authentication failed\", error);\r\n//     }\r\n//   }\r\n\r\n//   function onForgotPassword() {\r\n//     navigate(\"/forgot-password\");\r\n//   }\r\n\r\n//   function parseJwt(token) {\r\n//     if (!token) {\r\n//       console.error(\"Token is undefined or null\");\r\n//       return {};\r\n//     }\r\n//     try {\r\n//       const base64Url = token.split(\".\")[1];\r\n//       const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n//       const payload = JSON.parse(window.atob(base64));\r\n//       return {\r\n//         id: payload.userId,\r\n//         email: payload.sub,\r\n//       };\r\n//     } catch (error) {\r\n//       console.error(\"Error parsing JWT token:\", error);\r\n//       return {};\r\n//     }\r\n//   }\r\n\r\n//   function onLoginChange(event) {\r\n//     const { name, value } = event.target;\r\n//     setLogin((prevLoginData) => ({\r\n//       ...prevLoginData,\r\n//       [name]: value,\r\n//     }));\r\n\r\n//     setError((prevError) => ({\r\n//       ...prevError,\r\n//       [name]: !value,\r\n//     }));\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"Login-page\">\r\n//       <form className=\"Login-form\" onSubmit={onLogin}>\r\n//         <h1 className=\"Login-text\">Login</h1>\r\n//         <div className=\"input-group\">\r\n//           <label>Email ID</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"userName\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Email ID\"\r\n//             className={`login-userName ${\r\n//               error.userName ? \"login-input-error\" : \"\"\r\n//             }`}\r\n//             onChange={onLoginChange}\r\n//             value={login.userName}\r\n//           />\r\n//           {error.userName && (\r\n//             <span className=\"error-text\">Please Enter User ID</span>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"input-group\">\r\n//           <label>Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             name=\"password\"\r\n//             autoComplete=\"off\"\r\n//             placeholder=\"Password\"\r\n//             className={`login-password ${\r\n//               error.password ? \"login-input-error\" : \"\"\r\n//             }`}\r\n//             onChange={onLoginChange}\r\n//             value={login.password}\r\n//           />\r\n//           {error.password && (\r\n//             <span className=\"error-text\">Please Enter Password</span>\r\n//           )}\r\n//         </div>\r\n//         <button className=\"Login-btn\" type=\"submit\">\r\n//           Login\r\n//         </button>\r\n//         <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\r\n//           Forgot Password?\r\n//         </p>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Login;\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../login-page/login.css\";\r\nimport axios from \"axios\";\r\n// import image from \"../../image/login-backgroundImage.jpg\";\r\n\r\nfunction Login() {\r\n  console.log(\"1. Start of onLogin function\");\r\n  const navigate = useNavigate();\r\n  console.log(\"2. After preventDefault\");\r\n  const [login, setLogin] = useState({\r\n    userName: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState({\r\n    userName: false,\r\n    password: false,\r\n  });\r\n\r\n  async function onLogin(event) {\r\n    event.preventDefault();\r\n\r\n    const newError = {\r\n      userName: !login.userName,\r\n      password: !login.password,\r\n    };\r\n    console.log(\"3. New error state:\", newError);\r\n    setError(newError);\r\n\r\n    if (Object.values(newError).some((fieldError) => fieldError)) {\r\n      console.log(\"Mandatory details are not filled\");\r\n      return;\r\n    }\r\n\r\n    // Check for admin credentials\r\n    if (\r\n      login.userName === \"admin@easybanking.com\" &&\r\n      login.password === \"admin@easy123\"\r\n    ) {\r\n      handleAdminLogin();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:8080/api/authenticate\",\r\n        {\r\n          username: login.userName,\r\n          password: login.password,\r\n        }\r\n      );\r\n\r\n      console.log(\"Full Response:\", response);\r\n\r\n      if (response.status === 200) {\r\n        const token = response.data.jwt;\r\n        console.log(\"Received Token:\", token);\r\n\r\n        const tokenData = await parseJwt(token);\r\n        console.log(\"Token Data:\", tokenData);\r\n\r\n        localStorage.setItem(\"authToken\", token);\r\n        const userId = tokenData.id;\r\n        console.log(\"User ID:\", userId);\r\n\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n        localStorage.setItem(\"userId\", userId);\r\n        sessionStorage.setItem(\"userId\", userId);\r\n        console.log(\"Fetching user data...\");\r\n        const accountResponse = await axios.get(\r\n          `http://localhost:8080/api/account/userid/${userId}`\r\n        );\r\n        console.log(\"Account Response:\", accountResponse.data);\r\n        console.log(\"Fetching user data...\");\r\n        const userResponse = await axios.get(\r\n          `http://localhost:8080/api/users/${userId}`\r\n        );\r\n        console.log(\"User Response:\", userResponse.data);\r\n        console.log(userResponse.data);\r\n        navigate(`/dashboard/${userId}`, {\r\n          state: {\r\n            JWTaccount: accountResponse.data,\r\n            SetJWTuser: userResponse.data,\r\n          },\r\n        });\r\n      } else {\r\n        console.log(\"Unexpected response status:\", response.status);\r\n        setError({\r\n          userName: true,\r\n          password: true,\r\n        });\r\n        console.log(\"Invalid username or password\");\r\n      }\r\n    } catch (error) {\r\n      setError({\r\n        userName: true,\r\n        password: true,\r\n      });\r\n      console.error(\"Authentication failed\", error);\r\n      console.error(\"Authentication failed\", error);\r\n      if (error.response) {\r\n        console.error(\"Response data:\", error.response.data);\r\n        console.error(\"Response status:\", error.response.status);\r\n        console.error(\"Response headers:\", error.response.headers);\r\n      } else if (error.request) {\r\n        console.error(\"No response received:\", error.request);\r\n      } else {\r\n        console.error(\"Error setting up request:\", error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleAdminLogin() {\r\n    const adminToken =\r\n      ({ role: \"admin\", email: login.userName },\r\n      \"X9zIwQhYVFMm9jLWWtR88rnbY1wIfXqg2O1MN+v0sfY=\",\r\n      { expiresIn: \"1h\" });\r\n    localStorage.setItem(\"adminToken\", adminToken);\r\n    navigate(\"/admin\", { state: { adminJWT: adminToken } });\r\n  }\r\n\r\n  function onForgotPassword() {\r\n    navigate(\"/forgot-password\");\r\n  }\r\n\r\n  function parseJwt(token) {\r\n    if (!token) {\r\n      console.error(\"Token is undefined or null\");\r\n      return {};\r\n    }\r\n    try {\r\n      const base64Url = token.split(\".\")[1];\r\n      const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n      const payload = JSON.parse(window.atob(base64));\r\n      console.log(\"Full JWT payload:\", payload);\r\n      return {\r\n        id: payload.userId,\r\n        email: payload.sub,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error parsing JWT token:\", error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  function onLoginChange(event) {\r\n    const { name, value } = event.target;\r\n    setLogin((prevLoginData) => ({\r\n      ...prevLoginData,\r\n      [name]: value,\r\n    }));\r\n\r\n    setError((prevError) => ({\r\n      ...prevError,\r\n      [name]: !value,\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login-page\">\r\n      <form className=\"Login-form\" onSubmit={onLogin}>\r\n        <h1 className=\"Login-text\">Login</h1>\r\n        <div className=\"input-group\">\r\n          <label>Email ID</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Email ID\"\r\n            className={`login-userName ${\r\n              error.userName ? \"login-input-error\" : \"\"\r\n            }`}\r\n            onChange={onLoginChange}\r\n            value={login.userName}\r\n          />\r\n          {error.userName && (\r\n            <span className=\"error-text\">Please Enter User ID</span>\r\n          )}\r\n        </div>\r\n        <div className=\"input-group\">\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Password\"\r\n            className={`login-password ${\r\n              error.password ? \"login-input-error\" : \"\"\r\n            }`}\r\n            onChange={onLoginChange}\r\n            value={login.password}\r\n          />\r\n          {error.password && (\r\n            <span className=\"error-text\">Please Enter Password</span>\r\n          )}\r\n        </div>\r\n        <button className=\"Login-btn\" type=\"submit\">\r\n          Login\r\n        </button>\r\n        <p className=\"Forgot-password-link\" onClick={onForgotPassword}>\r\n          Forgot Password?\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,yBAAyB;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACfC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3C,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9BM,OAAO,CAACC,GAAG,CAAC,yBAAyB,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}